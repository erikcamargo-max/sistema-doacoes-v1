// corrigir-viacep-definitivo-v1.1.4.js
// Vers√£o: 1.1.4
// Data: 05/09/2025
// Objetivo: CORRIGIR DEFINITIVAMENTE integra√ß√£o ViaCEP
// Problema identificado: Conflito de prefixos (simple- vs input-)

const fs = require('fs');
const path = require('path');

console.log('üîß CORRE√á√ÉO DEFINITIVA: ViaCEP');
console.log('Vers√£o: 1.1.4 - Sistema de Doa√ß√µes');
console.log('üéØ Problema: Conflito de prefixos simple- vs input-');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

// ==========================================
// 1. SUBSTITUIR FUN√á√ïES VIACEP COMPLETAMENTE
// ==========================================

function corrigirFuncoesViaCEP() {
    console.log('üìù Substituindo fun√ß√µes ViaCEP com l√≥gica corrigida...');
    
    const appPath = './public/app.js';
    let content = fs.readFileSync(appPath, 'utf8');
    
    // Remover fun√ß√µes antigas conflitantes
    console.log('üóëÔ∏è Removendo fun√ß√µes ViaCEP antigas...');
    
    // Remover fun√ß√£o buscarCEP antiga
    const buscarCEPRegex = /window\.buscarCEP\s*=\s*async function[\s\S]*?^}/m;
    const buscarCEPMatch = content.match(buscarCEPRegex);
    if (buscarCEPMatch) {
        content = content.replace(buscarCEPMatch[0], '');
        console.log('‚úÖ Fun√ß√£o buscarCEP antiga removida');
    }
    
    // Remover fun√ß√£o formatCEPInput antiga
    const formatCEPRegex = /window\.formatCEPInput\s*=\s*function[\s\S]*?^}/m;
    const formatCEPMatch = content.match(formatCEPRegex);
    if (formatCEPMatch) {
        content = content.replace(formatCEPMatch[0], '');
        console.log('‚úÖ Fun√ß√£o formatCEPInput antiga removida');
    }
    
    // Adicionar novas fun√ß√µes corrigidas
    const novasFuncoesViaCEP = `
// ===============================================================================
// FUN√á√ïES VIACEP CORRIGIDAS - Vers√£o 1.1.4 DEFINITIVA
// ===============================================================================

// Fun√ß√£o para buscar CEP via ViaCEP API - CORRIGIDA
window.buscarCEP = async function(cepValue, contexto = 'input') {
    console.log('üîç buscarCEP chamada:', { cepValue, contexto });
    
    // Limpar CEP
    const cep = cepValue.replace(/\\D/g, '');
    
    if (cep.length !== 8) {
        console.log('‚ö†Ô∏è CEP inv√°lido (n√£o tem 8 d√≠gitos):', cep);
        return;
    }
    
    // Definir IDs dos campos baseado no contexto
    let ids = {};
    if (contexto === 'input') {
        // Modal Nova Doa√ß√£o
        ids = {
            cep: 'input-cep',
            logradouro: 'input-logradouro',
            bairro: 'input-bairro',
            cidade: 'input-cidade',
            estado: 'input-estado'
        };
    } else if (contexto === 'edit') {
        // Modal Edi√ß√£o
        ids = {
            cep: 'edit-cep',
            logradouro: 'edit-logradouro',
            bairro: 'edit-bairro',
            cidade: 'edit-cidade',
            estado: 'edit-estado'
        };
    } else if (contexto === 'simple') {
        // Modal Simples (legado)
        ids = {
            cep: 'simple-cep',
            logradouro: 'simple-logradouro',
            bairro: 'simple-bairro',
            cidade: 'simple-cidade',
            estado: 'simple-estado'
        };
    } else {
        console.error('‚ùå Contexto inv√°lido:', contexto);
        return;
    }
    
    console.log('üéØ IDs que ser√£o usados:', ids);
    
    // Obter elementos
    const cepField = document.getElementById(ids.cep);
    const logradouroField = document.getElementById(ids.logradouro);
    const bairroField = document.getElementById(ids.bairro);
    const cidadeField = document.getElementById(ids.cidade);
    const estadoField = document.getElementById(ids.estado);
    
    console.log('üì± Elementos encontrados:', {
        cep: !!cepField,
        logradouro: !!logradouroField,
        bairro: !!bairroField,
        cidade: !!cidadeField,
        estado: !!estadoField
    });
    
    // Mostrar indicador de carregamento
    if (cepField) {
        cepField.style.borderColor = '#fbbf24'; // Amarelo
        console.log('üü° Indicador de carregamento ativado');
    }
    
    try {
        const url = \`https://viacep.com.br/ws/\${cep}/json/\`;
        console.log('üåê Fazendo requisi√ß√£o para:', url);
        
        const response = await fetch(url);
        const data = await response.json();
        
        console.log('üì¶ Resposta ViaCEP:', data);
        
        if (!data.erro) {
            // Preencher campos automaticamente
            if (logradouroField && data.logradouro) {
                logradouroField.value = data.logradouro;
                console.log('‚úÖ Logradouro preenchido:', data.logradouro);
            }
            if (bairroField && data.bairro) {
                bairroField.value = data.bairro;
                console.log('‚úÖ Bairro preenchido:', data.bairro);
            }
            if (cidadeField && data.localidade) {
                cidadeField.value = data.localidade;
                console.log('‚úÖ Cidade preenchida:', data.localidade);
            }
            if (estadoField && data.uf) {
                estadoField.value = data.uf;
                console.log('‚úÖ Estado preenchido:', data.uf);
            }
            
            // Indicar sucesso
            if (cepField) {
                cepField.style.borderColor = '#10b981'; // Verde
                setTimeout(() => {
                    cepField.style.borderColor = '#d1d5db'; // Volta ao normal
                }, 2000);
                console.log('üü¢ Indicador de sucesso ativado');
            }
            
            // Focar no pr√≥ximo campo (n√∫mero)
            const numeroField = document.getElementById(ids.cep.replace('-cep', '-numero'));
            if (numeroField) {
                setTimeout(() => numeroField.focus(), 100);
                console.log('üéØ Foco movido para campo n√∫mero');
            }
            
        } else {
            console.log('‚ùå CEP n√£o encontrado na base ViaCEP');
            if (cepField) {
                cepField.style.borderColor = '#ef4444'; // Vermelho
                setTimeout(() => {
                    cepField.style.borderColor = '#d1d5db';
                }, 2000);
            }
        }
    } catch (error) {
        console.error('‚ùå Erro ao buscar CEP:', error);
        if (cepField) {
            cepField.style.borderColor = '#ef4444'; // Vermelho
            setTimeout(() => {
                cepField.style.borderColor = '#d1d5db';
            }, 2000);
        }
        
        // Mostrar erro amig√°vel ao usu√°rio
        alert('Erro ao buscar CEP. Verifique sua conex√£o com a internet e tente novamente.');
    }
}

// Fun√ß√£o para formatar input de CEP - CORRIGIDA
window.formatCEPInput = function(event) {
    console.log('‚å®Ô∏è formatCEPInput chamada:', event.target.id);
    
    let value = event.target.value.replace(/\\D/g, '');
    
    // Limitar a 8 d√≠gitos
    if (value.length > 8) {
        value = value.substring(0, 8);
    }
    
    // Adicionar h√≠fen
    if (value.length > 5) {
        value = value.substring(0, 5) + '-' + value.substring(5, 8);
    }
    
    event.target.value = value;
    console.log('‚úÖ CEP formatado:', value);
    
    // Buscar CEP automaticamente quando completo (8 d√≠gitos)
    if (value.replace(/\\D/g, '').length === 8) {
        // Detectar contexto baseado no ID do campo
        const fieldId = event.target.id;
        let contexto = 'input';
        
        if (fieldId.includes('edit-')) {
            contexto = 'edit';
        } else if (fieldId.includes('simple-')) {
            contexto = 'simple';
        }
        
        console.log('üöÄ CEP completo, iniciando busca autom√°tica...', { contexto });
        buscarCEP(value, contexto);
    }
}

// Tornar fun√ß√µes acess√≠veis globalmente - IMPORTANTE!
window.buscarCEP = window.buscarCEP;
window.formatCEPInput = window.formatCEPInput;

console.log('‚úÖ Fun√ß√µes ViaCEP 1.1.4 carregadas com sucesso');

`;
    
    // Inserir novas fun√ß√µes no in√≠cio do arquivo (ap√≥s coment√°rios)
    const insertPoint = content.indexOf('// Vari√°veis globais') || content.indexOf('let donations = []') || 0;
    content = content.substring(0, insertPoint) + novasFuncoesViaCEP + content.substring(insertPoint);
    
    fs.writeFileSync(appPath, content);
    console.log('‚úÖ Fun√ß√µes ViaCEP substitu√≠das no app.js');
}

// ==========================================
// 2. CORRIGIR EVENT LISTENERS NO SETUPEVENTLISTENERS
// ==========================================

function corrigirEventListeners() {
    console.log('üìù Corrigindo event listeners para CEP...');
    
    const appPath = './public/app.js';
    let content = fs.readFileSync(appPath, 'utf8');
    
    // Localizar setupEventListeners
    const setupIndex = content.indexOf('function setupEventListeners() {');
    if (setupIndex !== -1) {
        const functionEnd = content.indexOf('}', setupIndex);
        
        // Verificar se j√° tem configura√ß√£o CEP
        const setupContent = content.substring(setupIndex, functionEnd);
        
        if (!setupContent.includes('Event listeners para campos de endere√ßo - v1.1.4')) {
            const novosListeners = `
    
    // Event listeners para campos de endere√ßo - v1.1.4 CORRIGIDOS
    console.log('üîå Configurando event listeners ViaCEP...');
    
    // Campo CEP do modal Nova Doa√ß√£o
    const cepFieldInput = document.getElementById('input-cep');
    if (cepFieldInput) {
        // Remover listeners antigos para evitar duplica√ß√£o
        cepFieldInput.removeEventListener('input', formatCEPInput);
        cepFieldInput.addEventListener('input', formatCEPInput);
        console.log('‚úÖ Event listener configurado: input-cep');
    } else {
        console.log('‚ö†Ô∏è Campo input-cep n√£o encontrado');
    }
    
    // Campo CEP do modal Edi√ß√£o (se existir)
    const cepFieldEdit = document.getElementById('edit-cep');
    if (cepFieldEdit) {
        cepFieldEdit.removeEventListener('input', formatCEPInput);
        cepFieldEdit.addEventListener('input', formatCEPInput);
        console.log('‚úÖ Event listener configurado: edit-cep');
    }
    
    // Teste manual - bot√£o para testar ViaCEP
    console.log('üß™ Para testar ViaCEP manualmente, use:');
    console.log('   window.buscarCEP("01310-100", "input")');
`;
            
            content = content.substring(0, functionEnd) + novosListeners + content.substring(functionEnd);
            console.log('‚úÖ Event listeners ViaCEP adicionados');
        } else {
            console.log('‚úÖ Event listeners ViaCEP j√° configurados');
        }
    }
    
    fs.writeFileSync(appPath, content);
}

// ==========================================
// 3. ADICIONAR SCRIPT DE TESTE NO HTML
// ==========================================

function adicionarTesteViaCEP() {
    console.log('üìù Adicionando script de teste no HTML...');
    
    const indexPath = './public/index.html';
    let content = fs.readFileSync(indexPath, 'utf8');
    
    // Verificar se j√° tem script de teste
    if (!content.includes('<!-- Script de Teste ViaCEP v1.1.4 -->')) {
        const scriptTeste = `
    <!-- Script de Teste ViaCEP v1.1.4 -->
    <script>
        // Fun√ß√£o para testar ViaCEP manualmente
        window.testarViaCEP = function() {
            console.log('üß™ Testando ViaCEP...');
            if (typeof window.buscarCEP === 'function') {
                window.buscarCEP('01310-100', 'input');
                console.log('‚úÖ Teste iniciado - CEP: 01310-100');
            } else {
                console.error('‚ùå Fun√ß√£o buscarCEP n√£o encontrada');
            }
        }
        
        // Auto-teste ao carregar a p√°gina
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üîç Verificando fun√ß√µes ViaCEP...');
            console.log('buscarCEP dispon√≠vel:', typeof window.buscarCEP === 'function');
            console.log('formatCEPInput dispon√≠vel:', typeof window.formatCEPInput === 'function');
            console.log('üí° Para testar manualmente: testarViaCEP()');
        });
    </script>
`;
        
        // Inserir antes do fechamento do body
        const bodyEndIndex = content.lastIndexOf('</body>');
        if (bodyEndIndex !== -1) {
            content = content.substring(0, bodyEndIndex) + scriptTeste + content.substring(bodyEndIndex);
            console.log('‚úÖ Script de teste adicionado');
        }
    } else {
        console.log('‚úÖ Script de teste j√° existe');
    }
    
    fs.writeFileSync(indexPath, content);
}

// ==========================================
// 4. ATUALIZAR VERS√ÉO E DOCUMENTA√á√ÉO
// ==========================================

function atualizarVersao() {
    console.log('üìù Atualizando vers√£o para 1.1.4...');
    
    // package.json
    const packagePath = './package.json';
    let packageContent = fs.readFileSync(packagePath, 'utf8');
    packageContent = packageContent.replace('"version": "1.1.3"', '"version": "1.1.4"');
    fs.writeFileSync(packagePath, packageContent);
    
    // VERSAO.txt
    fs.writeFileSync('./VERSAO.txt', '1.1.4');
    
    console.log('‚úÖ Vers√£o atualizada para 1.1.4');
}

// ==========================================
// EXECU√á√ÉO PRINCIPAL
// ==========================================

try {
    console.log('üöÄ Iniciando corre√ß√£o definitiva ViaCEP...\n');
    
    if (!fs.existsSync('./public/app.js')) {
        console.log('‚ùå ERRO: Execute este script na raiz do projeto!');
        process.exit(1);
    }
    
    corrigirFuncoesViaCEP();
    corrigirEventListeners();
    adicionarTesteViaCEP();
    atualizarVersao();
    
    console.log('\nüéâ CORRE√á√ÉO VIACEP CONCLU√çDA COM SUCESSO!');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('‚úÖ Fun√ß√µes ViaCEP totalmente reescritas');
    console.log('‚úÖ Problema de prefixos corrigido');
    console.log('‚úÖ Event listeners configurados corretamente');
    console.log('‚úÖ Script de teste adicionado');
    console.log('‚úÖ Logs detalhados para debug');
    console.log('‚úÖ Vers√£o atualizada para 1.1.4');
    console.log('');
    console.log('üìã COMO TESTAR:');
    console.log('1. üîÑ Reinicie o servidor: npm start');
    console.log('2. üßπ Limpe cache: Ctrl+Shift+F5');
    console.log('3. üÜï Clique "Nova Doa√ß√£o"');
    console.log('4. ‚å®Ô∏è Digite CEP: 01310-100');
    console.log('5. üëÄ Veja preenchimento autom√°tico');
    console.log('6. üîç Console: F12 ‚Üí Ver logs detalhados');
    console.log('');
    console.log('üß™ TESTE MANUAL NO CONSOLE:');
    console.log('   testarViaCEP()');
    console.log('   window.buscarCEP("01310-100", "input")');
    console.log('');
    console.log('üéØ VIACEP AGORA DEVE FUNCIONAR 100%!');
    
} catch (error) {
    console.error('‚ùå ERRO durante a corre√ß√£o:', error.message);
    process.exit(1);
}