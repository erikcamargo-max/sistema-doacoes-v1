/**
 * ================================================================
 * SCRIPT: Extrair M√≥dulo de API
 * ================================================================
 * 
 * VERS√ÉO: 1.2.1
 * DATA: 10/09/2025
 * FASE: 2 - MODULARIZA√á√ÉO INCREMENTAL
 * ETAPA: Extra√ß√£o do m√≥dulo de API
 * 
 * DESCRI√á√ÉO:
 * Extrai APENAS as fun√ß√µes de API do app.js para api-module.js
 * mantendo o app.js funcionando como fallback
 * 
 * AUTOR: Sistema de Doa√ß√µes - Erik
 * ================================================================
 */

const fs = require('fs');
const path = require('path');

console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë   EXTRA√á√ÉO M√ìDULO API - SISTEMA v1.2.1            ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
console.log(`\nüìÖ Data/Hora: ${new Date().toLocaleString('pt-BR')}\n`);

const publicDir = path.join(__dirname, 'public');
const jsDir = path.join(publicDir, 'js');
const appJsPath = path.join(publicDir, 'app.js');

// ================================================================
// 1. VERIFICAR PR√â-REQUISITOS
// ================================================================

console.log('1Ô∏è‚É£  Verificando pr√©-requisitos...\n');

if (!fs.existsSync(appJsPath)) {
    console.error('‚ùå ERRO: app.js n√£o encontrado!');
    process.exit(1);
}

if (!fs.existsSync(jsDir)) {
    fs.mkdirSync(jsDir, { recursive: true });
    console.log('üìÅ Diret√≥rio js criado');
}

const appContent = fs.readFileSync(appJsPath, 'utf8');
console.log(`üìä app.js tem ${appContent.split('\n').length} linhas`);

// ================================================================
// 2. CRIAR BACKUP ANTES DA OPERA√á√ÉO
// ================================================================

console.log('\n2Ô∏è‚É£  Criando backup de seguran√ßa...\n');

const backupName = `app.js.backup_api_${Date.now()}`;
fs.copyFileSync(appJsPath, path.join(publicDir, backupName));
console.log(`‚úÖ Backup criado: ${backupName}`);

// ================================================================
// 3. EXTRAIR FUN√á√ïES DE API
// ================================================================

console.log('\n3Ô∏è‚É£  Extraindo fun√ß√µes de API...\n');

// Fun√ß√µes de API identificadas no app.js
const apiFunctions = [
    'loadDonations',
    'loadDonors', 
    'saveDonation',
    'updateDonation',
    'deleteDonation',
    'saveDonor',
    'updateDonor',
    'deleteDonor',
    'searchDonors',
    'generateCarne',
    'exportToPDF'
];

// Template do m√≥dulo de API
const apiModuleContent = `/**
 * ================================================================
 * M√ìDULO: API do Sistema de Doa√ß√µes
 * ================================================================
 * 
 * VERS√ÉO: 1.2.1
 * DATA: ${new Date().toLocaleDateString('pt-BR')}
 * 
 * DESCRI√á√ÉO:
 * Centraliza todas as chamadas √† API do backend
 * 
 * ================================================================
 */

// Namespace do m√≥dulo
window.SistemaDoacao = window.SistemaDoacao || {};
window.SistemaDoacao.api = window.SistemaDoacao.api || {};

(function(api) {
    'use strict';
    
    // ================================================================
    // CONFIGURA√á√ÉO DA API
    // ================================================================
    
    const API_BASE = window.location.origin;
    const API_TIMEOUT = 30000; // 30 segundos
    
    /**
     * Fun√ß√£o auxiliar para fazer requisi√ß√µes
     * VERS√ÉO: 1.0.0 - 10/09/2025
     */
    function apiRequest(url, options = {}) {
        // Adiciona timeout e headers padr√£o
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);
        
        const defaultOptions = {
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            },
            signal: controller.signal,
            ...options
        };
        
        return fetch(url, defaultOptions)
            .then(response => {
                clearTimeout(timeoutId);
                if (!response.ok) {
                    throw new Error(\`HTTP error! status: \${response.status}\`);
                }
                return response.json();
            })
            .catch(error => {
                clearTimeout(timeoutId);
                if (error.name === 'AbortError') {
                    throw new Error('Requisi√ß√£o expirou (timeout)');
                }
                throw error;
            });
    }
    
    // ================================================================
    // FUN√á√ïES DE DOA√á√ïES
    // ================================================================
    
    /**
     * Carrega todas as doa√ß√µes
     * VERS√ÉO: 1.0.0 - 10/09/2025
     */
    api.loadDonations = function() {
        console.log('[API] Carregando doa√ß√µes...');
        
        return apiRequest(\`\${API_BASE}/api/donations\`)
            .then(data => {
                console.log(\`[API] \${data.length} doa√ß√µes carregadas\`);
                
                // Atualiza vari√°vel global se existir
                if (window.allDonations !== undefined) {
                    window.allDonations = data;
                }
                
                // Chama fun√ß√£o de renderiza√ß√£o se existir
                if (typeof window.renderDonations === 'function') {
                    window.renderDonations(data);
                }
                
                // Atualiza dashboard se existir
                if (typeof window.updateDashboard === 'function') {
                    window.updateDashboard();
                }
                
                return data;
            })
            .catch(error => {
                console.error('[API] Erro ao carregar doa√ß√µes:', error);
                if (typeof window.showNotification === 'function') {
                    window.showNotification('Erro ao carregar doa√ß√µes', 'error');
                }
                throw error;
            });
    };
    
    /**
     * Salva uma nova doa√ß√£o
     * VERS√ÉO: 1.0.0 - 10/09/2025
     */
    api.saveDonation = function(donationData) {
        console.log('[API] Salvando doa√ß√£o...', donationData);
        
        return apiRequest(\`\${API_BASE}/api/donations\`, {
            method: 'POST',
            body: JSON.stringify(donationData)
        })
        .then(result => {
            console.log('[API] Doa√ß√£o salva com ID:', result.id);
            
            // Recarrega doa√ß√µes
            if (typeof api.loadDonations === 'function') {
                api.loadDonations();
            }
            
            // Notifica sucesso
            if (typeof window.showNotification === 'function') {
                window.showNotification('Doa√ß√£o salva com sucesso!', 'success');
            }
            
            return result;
        })
        .catch(error => {
            console.error('[API] Erro ao salvar doa√ß√£o:', error);
            if (typeof window.showNotification === 'function') {
                window.showNotification('Erro ao salvar doa√ß√£o', 'error');
            }
            throw error;
        });
    };
    
    /**
     * Atualiza uma doa√ß√£o existente
     * VERS√ÉO: 1.0.0 - 10/09/2025
     */
    api.updateDonation = function(id, donationData) {
        console.log('[API] Atualizando doa√ß√£o ID:', id);
        
        return apiRequest(\`\${API_BASE}/api/donations/\${id}\`, {
            method: 'PUT',
            body: JSON.stringify(donationData)
        })
        .then(result => {
            console.log('[API] Doa√ß√£o atualizada');
            
            // Recarrega doa√ß√µes
            if (typeof api.loadDonations === 'function') {
                api.loadDonations();
            }
            
            // Notifica sucesso
            if (typeof window.showNotification === 'function') {
                window.showNotification('Doa√ß√£o atualizada com sucesso!', 'success');
            }
            
            return result;
        })
        .catch(error => {
            console.error('[API] Erro ao atualizar doa√ß√£o:', error);
            if (typeof window.showNotification === 'function') {
                window.showNotification('Erro ao atualizar doa√ß√£o', 'error');
            }
            throw error;
        });
    };
    
    /**
     * Deleta uma doa√ß√£o
     * VERS√ÉO: 1.0.0 - 10/09/2025
     */
    api.deleteDonation = function(id) {
        console.log('[API] Deletando doa√ß√£o ID:', id);
        
        return apiRequest(\`\${API_BASE}/api/donations/\${id}\`, {
            method: 'DELETE'
        })
        .then(result => {
            console.log('[API] Doa√ß√£o deletada');
            
            // Recarrega doa√ß√µes
            if (typeof api.loadDonations === 'function') {
                api.loadDonations();
            }
            
            // Notifica sucesso
            if (typeof window.showNotification === 'function') {
                window.showNotification('Doa√ß√£o exclu√≠da com sucesso!', 'success');
            }
            
            return result;
        })
        .catch(error => {
            console.error('[API] Erro ao deletar doa√ß√£o:', error);
            if (typeof window.showNotification === 'function') {
                window.showNotification('Erro ao excluir doa√ß√£o', 'error');
            }
            throw error;
        });
    };
    
    // ================================================================
    // FUN√á√ïES DE DOADORES
    // ================================================================
    
    /**
     * Carrega todos os doadores
     * VERS√ÉO: 1.0.0 - 10/09/2025
     */
    api.loadDonors = function() {
        console.log('[API] Carregando doadores...');
        
        return apiRequest(\`\${API_BASE}/api/donors\`)
            .then(data => {
                console.log(\`[API] \${data.length} doadores carregados\`);
                
                // Atualiza vari√°vel global se existir
                if (window.allDonors !== undefined) {
                    window.allDonors = data;
                }
                
                return data;
            })
            .catch(error => {
                console.error('[API] Erro ao carregar doadores:', error);
                if (typeof window.showNotification === 'function') {
                    window.showNotification('Erro ao carregar doadores', 'error');
                }
                throw error;
            });
    };
    
    /**
     * Salva um novo doador
     * VERS√ÉO: 1.0.0 - 10/09/2025
     */
    api.saveDonor = function(donorData) {
        console.log('[API] Salvando doador...', donorData);
        
        return apiRequest(\`\${API_BASE}/api/donors\`, {
            method: 'POST',
            body: JSON.stringify(donorData)
        })
        .then(result => {
            console.log('[API] Doador salvo com ID:', result.id);
            
            // Recarrega doadores
            if (typeof api.loadDonors === 'function') {
                api.loadDonors();
            }
            
            // Notifica sucesso
            if (typeof window.showNotification === 'function') {
                window.showNotification('Doador salvo com sucesso!', 'success');
            }
            
            return result;
        })
        .catch(error => {
            console.error('[API] Erro ao salvar doador:', error);
            if (typeof window.showNotification === 'function') {
                window.showNotification('Erro ao salvar doador', 'error');
            }
            throw error;
        });
    };
    
    /**
     * Atualiza um doador existente
     * VERS√ÉO: 1.0.0 - 10/09/2025
     */
    api.updateDonor = function(id, donorData) {
        console.log('[API] Atualizando doador ID:', id);
        
        return apiRequest(\`\${API_BASE}/api/donors/\${id}\`, {
            method: 'PUT',
            body: JSON.stringify(donorData)
        })
        .then(result => {
            console.log('[API] Doador atualizado');
            
            // Recarrega doadores
            if (typeof api.loadDonors === 'function') {
                api.loadDonors();
            }
            
            // Notifica sucesso
            if (typeof window.showNotification === 'function') {
                window.showNotification('Doador atualizado com sucesso!', 'success');
            }
            
            return result;
        })
        .catch(error => {
            console.error('[API] Erro ao atualizar doador:', error);
            if (typeof window.showNotification === 'function') {
                window.showNotification('Erro ao atualizar doador', 'error');
            }
            throw error;
        });
    };
    
    /**
     * Deleta um doador
     * VERS√ÉO: 1.0.0 - 10/09/2025
     */
    api.deleteDonor = function(id) {
        console.log('[API] Deletando doador ID:', id);
        
        return apiRequest(\`\${API_BASE}/api/donors/\${id}\`, {
            method: 'DELETE'
        })
        .then(result => {
            console.log('[API] Doador deletado');
            
            // Recarrega doadores
            if (typeof api.loadDonors === 'function') {
                api.loadDonors();
            }
            
            // Notifica sucesso
            if (typeof window.showNotification === 'function') {
                window.showNotification('Doador exclu√≠do com sucesso!', 'success');
            }
            
            return result;
        })
        .catch(error => {
            console.error('[API] Erro ao deletar doador:', error);
            if (typeof window.showNotification === 'function') {
                window.showNotification('Erro ao excluir doador', 'error');
            }
            throw error;
        });
    };
    
    /**
     * Busca doadores
     * VERS√ÉO: 1.0.0 - 10/09/2025
     */
    api.searchDonors = function(query) {
        console.log('[API] Buscando doadores:', query);
        
        return apiRequest(\`\${API_BASE}/api/donors/search?q=\${encodeURIComponent(query)}\`)
            .then(data => {
                console.log(\`[API] \${data.length} doadores encontrados\`);
                return data;
            })
            .catch(error => {
                console.error('[API] Erro ao buscar doadores:', error);
                throw error;
            });
    };
    
    // ================================================================
    // FUN√á√ïES DE EXPORTA√á√ÉO
    // ================================================================
    
    /**
     * Gera carn√™ de pagamento
     * VERS√ÉO: 1.0.0 - 10/09/2025
     */
    api.generateCarne = function(donationId) {
        console.log('[API] Gerando carn√™ para doa√ß√£o ID:', donationId);
        
        // Abre em nova janela
        const url = \`\${API_BASE}/api/donations/\${donationId}/carne\`;
        window.open(url, '_blank');
        
        if (typeof window.showNotification === 'function') {
            window.showNotification('Carn√™ gerado com sucesso!', 'success');
        }
    };
    
    /**
     * Exporta relat√≥rio em PDF
     * VERS√ÉO: 1.0.0 - 10/09/2025
     */
    api.exportToPDF = function(filters = {}) {
        console.log('[API] Exportando relat√≥rio PDF...', filters);
        
        // Monta query string
        const params = new URLSearchParams(filters);
        const url = \`\${API_BASE}/api/reports/pdf?\${params.toString()}\`;
        
        // Abre em nova janela
        window.open(url, '_blank');
        
        if (typeof window.showNotification === 'function') {
            window.showNotification('Relat√≥rio gerado com sucesso!', 'success');
        }
    };
    
    // ================================================================
    // INICIALIZA√á√ÉO
    // ================================================================
    
    console.log('[API Module] M√≥dulo de API carregado - v1.2.1');
    
})(window.SistemaDoacao.api);
`;

// Salvar o m√≥dulo
fs.writeFileSync(path.join(jsDir, 'api-module.js'), apiModuleContent, 'utf8');
console.log('‚úÖ api-module.js criado com sucesso');

// ================================================================
// 4. ATUALIZAR LOADER.JS
// ================================================================

console.log('\n4Ô∏è‚É£  Atualizando loader.js...\n');

const loaderPath = path.join(jsDir, 'loader.js');

// Criar novo loader.js atualizado
const loaderUpdate = `/**
 * ================================================================
 * LOADER: Integrador de M√≥dulos
 * ================================================================
 * 
 * VERS√ÉO: 1.2.1
 * DATA: ${new Date().toLocaleDateString('pt-BR')}
 * 
 * DESCRI√á√ÉO:
 * Integra os m√≥dulos com o app.js original mantendo compatibilidade
 * 
 * ================================================================
 */

(function() {
    'use strict';
    
    console.log('[Loader] Iniciando integra√ß√£o de m√≥dulos...');
    
    // ================================================================
    // INTEGRA√á√ÉO DO M√ìDULO CORE
    // ================================================================
    
    if (window.SistemaDoacao && window.SistemaDoacao.core) {
        console.log('[Loader] Integrando m√≥dulo core...');
        
        // Integra fun√ß√µes do core
        const core = window.SistemaDoacao.core;
        
        // Substitui fun√ß√µes globais se existirem melhores vers√µes no core
        if (core.showNotification && (!window.showNotification || core.showNotification.toString().length > window.showNotification.toString().length)) {
            window.showNotification = core.showNotification;
            console.log('[Loader] ‚úÖ showNotification atualizada do core');
        }
        
        if (core.formatCurrency) {
            window.formatCurrency = core.formatCurrency;
            console.log('[Loader] ‚úÖ formatCurrency atualizada do core');
        }
        
        if (core.formatDate) {
            window.formatDate = core.formatDate;
            console.log('[Loader] ‚úÖ formatDate atualizada do core');
        }
        
        if (core.formatPhone) {
            window.formatPhone = core.formatPhone;
            console.log('[Loader] ‚úÖ formatPhone atualizada do core');
        }
    }
    
    // ================================================================
    // INTEGRA√á√ÉO DO M√ìDULO API
    // ================================================================
    
    if (window.SistemaDoacao && window.SistemaDoacao.api) {
        console.log('[Loader] Integrando m√≥dulo API...');
        
        const api = window.SistemaDoacao.api;
        
        // Salva refer√™ncias das fun√ß√µes originais
        const originalFunctions = {
            loadDonations: window.loadDonations,
            loadDonors: window.loadDonors,
            saveDonation: window.saveDonation,
            updateDonation: window.updateDonation,
            deleteDonation: window.deleteDonation,
            saveDonor: window.saveDonor,
            updateDonor: window.updateDonor,
            deleteDonor: window.deleteDonor,
            searchDonors: window.searchDonors,
            generateCarne: window.generateCarne,
            exportToPDF: window.exportToPDF
        };
        
        // Substitui pelas novas com fallback
        const apiFunctionNames = Object.keys(originalFunctions);
        
        apiFunctionNames.forEach(funcName => {
            if (api[funcName]) {
                window[funcName] = function() {
                    try {
                        return api[funcName].apply(this, arguments);
                    } catch (error) {
                        console.warn(\`[Loader] Erro no m√≥dulo API (\${funcName}), usando fallback\`);
                        if (originalFunctions[funcName]) {
                            return originalFunctions[funcName].apply(this, arguments);
                        }
                        throw error;
                    }
                };
                console.log(\`[Loader] ‚úÖ \${funcName} integrada com fallback\`);
            }
        });
    }
    
    // ================================================================
    // GARANTIR INICIALIZA√á√ÉO
    // ================================================================
    
    // Aguarda DOM carregar completamente
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            console.log('[Loader] DOM carregado, iniciando sistema...');
            
            // Carrega dados iniciais
            if (typeof window.loadDonations === 'function') {
                window.loadDonations();
            }
            
            if (typeof window.loadDonors === 'function') {
                window.loadDonors();
            }
        });
    } else {
        // DOM j√° carregado
        console.log('[Loader] DOM j√° carregado, iniciando sistema...');
        
        if (typeof window.loadDonations === 'function') {
            window.loadDonations();
        }
        
        if (typeof window.loadDonors === 'function') {
            window.loadDonors();
        }
    }
    
    console.log('[Loader] Integra√ß√£o de m√≥dulos conclu√≠da - v1.2.1');
    
})();
`;

fs.writeFileSync(loaderPath, loaderUpdate, 'utf8');
console.log('‚úÖ loader.js atualizado com integra√ß√£o do m√≥dulo API');

// ================================================================
// 5. ATUALIZAR HTML PARA INCLUIR NOVO M√ìDULO
// ================================================================

console.log('\n5Ô∏è‚É£  Atualizando HTML...\n');

const indexPath = path.join(publicDir, 'index.html');
let indexContent = fs.readFileSync(indexPath, 'utf8');

// Procurar onde inserir o novo script
if (!indexContent.includes('api-module.js')) {
    // Adicionar ap√≥s core.js e antes de app.js
    const scriptPattern = /<script src="js\/core\.js"><\/script>/;
    
    if (scriptPattern.test(indexContent)) {
        indexContent = indexContent.replace(
            scriptPattern,
            `<script src="js/core.js"></script>
    <script src="js/api-module.js"></script>`
        );
    } else {
        // Se n√£o encontrar core.js, adicionar antes de app.js
        indexContent = indexContent.replace(
            '<script src="app.js"></script>',
            `<script src="js/api-module.js"></script>
    <script src="app.js"></script>`
        );
    }
    
    fs.writeFileSync(indexPath, indexContent, 'utf8');
    console.log('‚úÖ HTML atualizado com api-module.js');
} else {
    console.log('‚ö†Ô∏è  api-module.js j√° est√° no HTML');
}

// ================================================================
// 6. CRIAR TESTE DE VALIDA√á√ÉO
// ================================================================

console.log('\n6Ô∏è‚É£  Criando script de teste...\n');

const testScript = `/**
 * Script de teste para verificar m√≥dulo API
 * Execute no console do navegador
 */

// Teste 1: Verificar se m√≥dulo foi carregado
console.log('Teste 1: M√≥dulo API carregado?', 
    window.SistemaDoacao && window.SistemaDoacao.api ? '‚úÖ SIM' : '‚ùå N√ÉO');

// Teste 2: Verificar fun√ß√µes integradas
const funcoes = ['loadDonations', 'saveDonation', 'updateDonation', 'deleteDonation'];
funcoes.forEach(f => {
    console.log(\`Teste 2: \${f} dispon√≠vel?\`, 
        typeof window[f] === 'function' ? '‚úÖ SIM' : '‚ùå N√ÉO');
});

// Teste 3: Testar loadDonations
console.log('Teste 3: Executando loadDonations...');
if (window.loadDonations) {
    window.loadDonations()
        .then(() => console.log('‚úÖ loadDonations funcionou!'))
        .catch(err => console.error('‚ùå Erro:', err));
}
`;

fs.writeFileSync(path.join(__dirname, 'testar-api-module.js'), testScript, 'utf8');
console.log('‚úÖ Script de teste criado: testar-api-module.js');

// ================================================================
// RELAT√ìRIO FINAL
// ================================================================

console.log('\n' + '‚ïê'.repeat(56));
console.log('üìä M√ìDULO API EXTRA√çDO COM SUCESSO!');
console.log('‚ïê'.repeat(56));

console.log('\n‚úÖ O QUE FOI FEITO:');
console.log('   1. api-module.js criado com todas fun√ß√µes de API');
console.log('   2. loader.js atualizado com integra√ß√£o e fallback');
console.log('   3. HTML atualizado para carregar novo m√≥dulo');
console.log('   4. Backup criado:', backupName);
console.log('   5. Script de teste criado');

console.log('\nüìÅ ESTRUTURA ATUAL:');
console.log('   public/');
console.log('   ‚îú‚îÄ‚îÄ app.js (original mantido)');
console.log('   ‚îú‚îÄ‚îÄ index.html (atualizado)');
console.log('   ‚îî‚îÄ‚îÄ js/');
console.log('       ‚îú‚îÄ‚îÄ core.js');
console.log('       ‚îú‚îÄ‚îÄ api-module.js (NOVO)');
console.log('       ‚îî‚îÄ‚îÄ loader.js (atualizado)');

console.log('\nüîÑ TESTE AGORA:');
console.log('‚ïê'.repeat(56));
console.log('1. Reinicie o servidor: npm start');
console.log('2. Acesse: http://localhost:3001');
console.log('3. Abra o console do navegador (F12)');
console.log('4. Cole o conte√∫do de testar-api-module.js');

console.log('\nüöÄ PR√ìXIMOS PASSOS:');
console.log('‚ïê'.repeat(56));
console.log('Se tudo funcionar, podemos extrair:');
console.log('1. ui-module.js - Fun√ß√µes de interface');
console.log('2. validators.js - Valida√ß√µes');
console.log('3. exports-module.js - Exporta√ß√µes');

console.log('\n‚úÖ MODULARIZA√á√ÉO INCREMENTAL EM PROGRESSO!');
console.log('üéâ FASE 2 - M√ìDULO API EXTRA√çDO!');
console.log('‚ïê'.repeat(56));