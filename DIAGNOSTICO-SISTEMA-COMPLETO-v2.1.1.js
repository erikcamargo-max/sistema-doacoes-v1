/**
 * ================================================================
 * SCRIPT: Diagn√≥stico COMPLETO do Sistema v2.1.1
 * ================================================================
 * 
 * VERS√ÉO: 2.1.1
 * DATA: 20/09/2025
 * OBJETIVO: An√°lise profunda do estado atual ap√≥s corre√ß√µes massivas
 * 
 * BASEADO NO HIST√ìRICO:
 * - 5 problemas cr√≠ticos foram corrigidos
 * - Banco foi limpo completamente (0 registros)
 * - L√≥gica de parcelas foi reformulada
 * - Sistema base (doa√ß√µes √∫nicas) testado e aprovado
 * 
 * ESTE SCRIPT ANALISA:
 * 1. Estrutura atual do banco de dados (p√≥s-limpeza)
 * 2. Implementa√ß√£o das corre√ß√µes v2.1.1 no c√≥digo
 * 3. Estado das fun√ß√µes cr√≠ticas (parcelas recorrentes)
 * 4. Verifica√ß√£o das corre√ß√µes aplicadas
 * 5. Identifica√ß√£o de pontos de teste pendentes
 * 
 * ================================================================
 */

const fs = require('fs');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();

console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë           DIAGN√ìSTICO COMPLETO SISTEMA v2.1.1               ‚ïë');
console.log('‚ïë              (P√≥s-corre√ß√µes massivas 20/09)                 ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
console.log(`\nüìÖ Data/Hora: ${new Date().toLocaleString('pt-BR')}\n`);

const publicDir = path.join(__dirname, 'public');
const appJsPath = path.join(publicDir, 'app.js');
const serverJsPath = path.join(__dirname, 'server.js');
const dbPath = path.join(__dirname, 'database', 'doacoes.db');
const indexHtmlPath = path.join(publicDir, 'index.html');

// ================================================================
// 1. VERIFICA√á√ÉO DO ESTADO P√ìS-CORRE√á√ïES
// ================================================================

console.log('1Ô∏è‚É£  Verificando estado p√≥s-corre√ß√µes v2.1.1...\n');

function verificarCorrecoesAplicadas() {
    console.log('üîç VERIFICANDO CORRE√á√ïES APLICADAS (20/09/2025):');
    console.log('');
    
    // Verificar se arquivos existem
    const arquivos = [
        { path: appJsPath, nome: 'app.js (frontend)' },
        { path: serverJsPath, nome: 'server.js (backend)' },
        { path: indexHtmlPath, nome: 'index.html (interface)' },
        { path: dbPath, nome: 'doacoes.db (banco)' }
    ];
    
    console.log('üìÇ ARQUIVOS PRINCIPAIS:');
    arquivos.forEach(arquivo => {
        const existe = fs.existsSync(arquivo.path);
        console.log(`   ${existe ? '‚úÖ' : '‚ùå'} ${arquivo.nome}`);
        
        if (existe) {
            const stats = fs.statSync(arquivo.path);
            const tamanho = Math.round(stats.size / 1024);
            const modificado = stats.mtime.toLocaleString('pt-BR');
            console.log(`      üìä ${tamanho} KB - Modificado: ${modificado}`);
        }
    });
    console.log('');
    
    // Verificar corre√ß√µes espec√≠ficas no frontend
    if (fs.existsSync(appJsPath)) {
        const appContent = fs.readFileSync(appJsPath, 'utf8');
        
        console.log('üîß CORRE√á√ïES NO FRONTEND (app.js):');
        
        // CORRE√á√ÉO 1: ID do campo valor das parcelas
        const campoCorreto = appContent.includes('input-valor-parcelas');
        const campoErrado = appContent.includes('input-valor-parcela') && !appContent.includes('input-valor-parcelas');
        console.log(`   ${campoCorreto ? '‚úÖ' : '‚ùå'} ID do campo corrigido: input-valor-parcelas`);
        if (campoErrado) {
            console.log(`   ‚ö†Ô∏è  ID antigo ainda encontrado: input-valor-parcela`);
        }
        
        // CORRE√á√ÉO 2: Valida√ß√µes duplicadas removidas
        const validacoes = appContent.match(/getElementById\(['"`]input-valor-parcelas['"`]\)/g);
        const numValidacoes = validacoes ? validacoes.length : 0;
        console.log(`   ${numValidacoes <= 1 ? '‚úÖ' : '‚ùå'} Valida√ß√µes duplicadas: ${numValidacoes} encontradas`);
        
        // CORRE√á√ÉO 3: Status das parcelas (primeira PAGA, demais PENDENTES)
        const statusLogica = appContent.includes('PAGA') && appContent.includes('PENDENTE');
        console.log(`   ${statusLogica ? '‚úÖ' : '‚ùå'} L√≥gica de status implementada`);
        
        // Verificar vers√£o no c√≥digo
        const versaoMatch = appContent.match(/v2\.1\.\d/);
        const versao = versaoMatch ? versaoMatch[0] : 'n√£o encontrada';
        console.log(`   üìå Vers√£o identificada: ${versao}`);
        console.log('');
    }
    
    // Verificar corre√ß√µes espec√≠ficas no backend
    if (fs.existsSync(serverJsPath)) {
        const serverContent = fs.readFileSync(serverJsPath, 'utf8');
        
        console.log('üîß CORRE√á√ïES NO BACKEND (server.js):');
        
        // CORRE√á√ÉO 4: Vari√°vel valorDoacao ‚Üí valorPrimeiraParcela
        const variavelCorreta = serverContent.includes('valorPrimeiraParcela');
        const variavelErrada = serverContent.includes('valorDoacao') && !serverContent.includes('// OLD:');
        console.log(`   ${variavelCorreta ? '‚úÖ' : '‚ùå'} Vari√°vel corrigida: valorPrimeiraParcela`);
        if (variavelErrada) {
            console.log(`   ‚ö†Ô∏è  Vari√°vel antiga ainda encontrada: valorDoacao`);
        }
        
        // CORRE√á√ÉO 5: L√≥gica de parcelas (primeira ‚â† futuras)
        const logicaParcelas = serverContent.includes('valor_parcelas_futuras');
        console.log(`   ${logicaParcelas ? '‚úÖ' : '‚ùå'} L√≥gica de parcelas diferenciadas`);
        
        // Verificar console.log v2.1.0 ou superior
        const logVersao = serverContent.includes('v2.1');
        console.log(`   ${logVersao ? '‚úÖ' : '‚ùå'} Logs de vers√£o v2.1.x encontrados`);
        
        // Verificar vers√£o no c√≥digo
        const versaoMatch = serverContent.match(/v2\.1\.\d/);
        const versao = versaoMatch ? versaoMatch[0] : 'n√£o encontrada';
        console.log(`   üìå Vers√£o identificada: ${versao}`);
        console.log('');
    }
}

// ================================================================
// 2. AN√ÅLISE DO BANCO DE DADOS (P√ìS-LIMPEZA)
// ================================================================

console.log('2Ô∏è‚É£  Analisando banco de dados (p√≥s-limpeza v2.1.3)...\n');

function analisarBancoLimpo() {
    return new Promise((resolve, reject) => {
        const db = new sqlite3.Database(dbPath, (err) => {
            if (err) {
                console.error('‚ùå Erro ao conectar no banco:', err.message);
                reject(err);
                return;
            }
            
            console.log('‚úÖ Conectado ao banco de dados');
            
            // Verificar se banco foi realmente limpo
            const tabelasImportantes = ['doadores', 'doacoes', 'historico_pagamentos', 'parcelas_futuras'];
            
            console.log('üßπ VERIFICA√á√ÉO DA LIMPEZA (v2.1.3):');
            
            const promises = tabelasImportantes.map(tabela => {
                return new Promise((resolveTabela) => {
                    db.get(`SELECT COUNT(*) as count FROM ${tabela}`, [], (err, result) => {
                        if (err) {
                            console.log(`   ‚ùå Erro ao verificar ${tabela}: ${err.message}`);
                        } else {
                            const count = result.count;
                            console.log(`   ${count === 0 ? '‚úÖ' : '‚ö†Ô∏è'} ${tabela}: ${count} registros`);
                        }
                        resolveTabela();
                    });
                });
            });
            
            Promise.all(promises).then(() => {
                // Verificar estrutura das tabelas
                console.log('\nüìã ESTRUTURA DAS TABELAS:');
                verificarEstruturaBanco(db).then(() => {
                    db.close();
                    resolve();
                });
            });
        });
    });
}

function verificarEstruturaBanco(db) {
    return new Promise((resolve) => {
        // Verificar se tabela doadores tem todos os campos necess√°rios
        db.all("PRAGMA table_info(doadores)", [], (err, columns) => {
            if (!err) {
                const campos = columns.map(col => col.name);
                const camposEssenciais = ['id', 'nome', 'cpf', 'telefone1', 'codigo_doador', 'cep', 'logradouro', 'numero', 'bairro', 'cidade', 'estado'];
                
                console.log(`   üìä doadores (${columns.length} campos):`);
                camposEssenciais.forEach(campo => {
                    const tem = campos.includes(campo);
                    console.log(`      ${tem ? '‚úÖ' : '‚ùå'} ${campo}`);
                });
            }
            
            // Verificar parcelas_futuras
            db.all("PRAGMA table_info(parcelas_futuras)", [], (err, columns) => {
                if (!err) {
                    console.log(`\n   üìä parcelas_futuras (${columns.length} campos):`);
                    const camposParcelas = ['id', 'doacao_id', 'numero_parcela', 'data_vencimento', 'valor', 'status'];
                    const campos = columns.map(col => col.name);
                    
                    camposParcelas.forEach(campo => {
                        const tem = campos.includes(campo);
                        console.log(`      ${tem ? '‚úÖ' : '‚ùå'} ${campo}`);
                    });
                }
                resolve();
            });
        });
    });
}

// ================================================================
// 3. AN√ÅLISE CR√çTICA DO C√ìDIGO (P√ìS-CORRE√á√ïES)
// ================================================================

console.log('\n3Ô∏è‚É£  Analisando implementa√ß√£o das corre√ß√µes cr√≠ticas...\n');

function analisarImplementacaoCorre√ß√µes() {
    console.log('üî¨ AN√ÅLISE CR√çTICA DO C√ìDIGO:');
    console.log('');
    
    // Analisar frontend
    if (fs.existsSync(appJsPath)) {
        const appContent = fs.readFileSync(appJsPath, 'utf8');
        
        console.log('üì± FRONTEND (app.js):');
        console.log(`   üìä Tamanho: ${Math.round(appContent.length / 1024)} KB`);
        console.log(`   üìä Linhas: ${appContent.split('\n').length}`);
        
        // Verificar fun√ß√£o addDonation (cr√≠tica para parcelas)
        const addDonationMatch = appContent.match(/function\s+addDonation|addDonation\s*[:=]\s*function|window\.addDonation\s*=/);
        console.log(`   ${addDonationMatch ? '‚úÖ' : '‚ùå'} Fun√ß√£o addDonation encontrada`);
        
        // Verificar coleta do campo valor das parcelas
        const coletaCampo = appContent.includes('getElementById(\'input-valor-parcelas\')') || 
                           appContent.includes('getElementById("input-valor-parcelas")');
        console.log(`   ${coletaCampo ? '‚úÖ' : '‚ùå'} Coleta do campo valor-parcelas`);
        
        // Verificar envio dos dados para servidor
        const envioRecorrente = appContent.includes('recorrente:') && appContent.includes('parcelas_totais:');
        console.log(`   ${envioRecorrente ? '‚úÖ' : '‚ùå'} Envio de dados de recorr√™ncia`);
        
        // Verificar fun√ß√£o de hist√≥rico
        const funcaoHistorico = appContent.includes('showHistoryModal') || appContent.includes('viewHistory');
        console.log(`   ${funcaoHistorico ? '‚úÖ' : '‚ùå'} Fun√ß√£o de hist√≥rico implementada`);
        console.log('');
    }
    
    // Analisar backend
    if (fs.existsSync(serverJsPath)) {
        const serverContent = fs.readFileSync(serverJsPath, 'utf8');
        
        console.log('üñ•Ô∏è  BACKEND (server.js):');
        console.log(`   üìä Tamanho: ${Math.round(serverContent.length / 1024)} KB`);
        console.log(`   üìä Linhas: ${serverContent.split('\n').length}`);
        
        // Verificar rota POST /api/doacoes
        const rotaPost = serverContent.includes('app.post(\'/api/doacoes\'') || serverContent.includes('app.post("/api/doacoes"');
        console.log(`   ${rotaPost ? '‚úÖ' : '‚ùå'} Rota POST /api/doacoes`);
        
        // Verificar processamento de parcelas recorrentes
        const processamentoParcelas = serverContent.includes('if (recorrente === 1') || serverContent.includes('if (recorrente == 1');
        console.log(`   ${processamentoParcelas ? '‚úÖ' : '‚ùå'} Processamento de parcelas recorrentes`);
        
        // Verificar cria√ß√£o de parcelas futuras
        const criacaoParcelas = serverContent.includes('INSERT INTO parcelas_futuras');
        console.log(`   ${criacaoParcelas ? '‚úÖ' : '‚ùå'} Cria√ß√£o autom√°tica de parcelas futuras`);
        
        // Verificar fun√ß√£o insertDoacao
        const funcaoInsert = serverContent.includes('function insertDoacao') || serverContent.includes('insertDoacao =');
        console.log(`   ${funcaoInsert ? '‚úÖ' : '‚ùå'} Fun√ß√£o insertDoacao implementada`);
        
        // Verificar uso correto das vari√°veis
        const variavelCorreta = serverContent.includes('valorPrimeiraParcela') && !serverContent.includes('valorDoacao = ');
        console.log(`   ${variavelCorreta ? '‚úÖ' : '‚ùå'} Vari√°veis de parcelas corretas`);
        console.log('');
    }
}

// ================================================================
// 4. IDENTIFICA√á√ÉO DE PROBLEMAS REMANESCENTES
// ================================================================

function identificarProblemasRemanescentes() {
    console.log('4Ô∏è‚É£  Identificando problemas remanescentes...\n');
    
    console.log('üîç PROBLEMAS POTENCIAIS A VERIFICAR:');
    console.log('');
    
    // Verificar se HTML tem campos corretos
    if (fs.existsSync(indexHtmlPath)) {
        const htmlContent = fs.readFileSync(indexHtmlPath, 'utf8');
        
        console.log('üåê INTERFACE HTML:');
        
        // Verificar campo valor-parcelas
        const campoHTML = htmlContent.includes('id="input-valor-parcelas"');
        console.log(`   ${campoHTML ? '‚úÖ' : '‚ùå'} Campo input-valor-parcelas no HTML`);
        
        // Verificar checkbox recorrente
        const checkboxRecorrente = htmlContent.includes('input-recorrente') || htmlContent.includes('checkbox-recorrente');
        console.log(`   ${checkboxRecorrente ? '‚úÖ' : '‚ùå'} Checkbox de doa√ß√£o recorrente`);
        
        // Verificar campos de parcelas
        const camposParcelas = htmlContent.includes('input-parcelas') && htmlContent.includes('input-proxima-parcela');
        console.log(`   ${camposParcelas ? '‚úÖ' : '‚ùå'} Campos de configura√ß√£o de parcelas`);
        console.log('');
    }
    
    console.log('‚ö†Ô∏è  PONTOS DE ATEN√á√ÉO IDENTIFICADOS:');
    console.log('');
    console.log('1. üß™ TESTE PENDENTE:');
    console.log('   ‚Üí Doa√ß√£o recorrente ainda n√£o foi testada p√≥s-corre√ß√µes');
    console.log('   ‚Üí L√≥gica te√≥rica: R$ 100 + 4√óR$ 25 = R$ 200 total');
    console.log('   ‚Üí Status esperado: 1 PAGA + 4 PENDENTES');
    console.log('');
    console.log('2. üìä DASHBOARD:');
    console.log('   ‚Üí Verificar se soma parcelas corretamente');
    console.log('   ‚Üí Confirmar contagem de doa√ß√µes recorrentes');
    console.log('');
    console.log('3. üîÑ MODAL DE HIST√ìRICO:');
    console.log('   ‚Üí Verificar se mostra todas as parcelas');
    console.log('   ‚Üí Confirmar possibilidade de lan√ßar pagamentos');
    console.log('');
    console.log('4. üì± INTERFACE:');
    console.log('   ‚Üí Verificar responsividade p√≥s-corre√ß√µes');
    console.log('   ‚Üí Confirmar valida√ß√µes funcionando');
}

// ================================================================
// 5. PLANO DE TESTE RECOMENDADO
// ================================================================

function gerarPlanoTeste() {
    console.log('\n5Ô∏è‚É£  Gerando plano de teste recomendado...\n');
    
    console.log('üéØ PLANO DE TESTE PASSO-A-PASSO:');
    console.log('');
    console.log('FASE 1 - VERIFICA√á√ÉO B√ÅSICA:');
    console.log('   1. ‚úÖ Executar: npm start');
    console.log('   2. ‚úÖ Acessar: http://localhost:3001');
    console.log('   3. ‚úÖ Verificar dashboard carrega sem erros');
    console.log('   4. ‚úÖ Verificar console do navegador (F12)');
    console.log('');
    console.log('FASE 2 - TESTE DOA√á√ÉO √öNICA (CONTROLE):');
    console.log('   1. ‚úÖ Cadastrar doador teste: "TESTE SISTEMA v2.1.1"');
    console.log('   2. ‚úÖ Doa√ß√£o √∫nica: R$ 50, PIX, N√£o recorrente');
    console.log('   3. ‚úÖ Verificar salvamento sem erros');
    console.log('   4. ‚úÖ Verificar dashboard atualizado');
    console.log('   5. ‚úÖ Gerar carn√™ e verificar');
    console.log('');
    console.log('FASE 3 - TESTE DOA√á√ÉO RECORRENTE (CR√çTICO):');
    console.log('   1. üß™ Cadastrar: "Jo√£o Recorrente TESTE"');
    console.log('   2. üß™ Doa√ß√£o: R$ 100, PIX, Recorrente = SIM');
    console.log('   3. üß™ Configurar: 5 parcelas, R$ 25 cada futura');
    console.log('   4. üß™ Pr√≥xima parcela: 2025-10-21');
    console.log('   5. üß™ Salvar e verificar:');
    console.log('      ‚Üí Console sem erros');
    console.log('      ‚Üí Dashboard: +1 doa√ß√£o recorrente');
    console.log('      ‚Üí Total arrecadado: +R$ 100 (primeira parcela)');
    console.log('');
    console.log('FASE 4 - VERIFICA√á√ÉO DE PARCELAS:');
    console.log('   1. üîç Abrir modal de hist√≥rico da doa√ß√£o recorrente');
    console.log('   2. üîç Verificar se mostra:');
    console.log('      ‚Üí Parcela 1/5: R$ 100 - PAGA');
    console.log('      ‚Üí Parcela 2/5: R$ 25 - PENDENTE');
    console.log('      ‚Üí Parcela 3/5: R$ 25 - PENDENTE');
    console.log('      ‚Üí Parcela 4/5: R$ 25 - PENDENTE');
    console.log('      ‚Üí Parcela 5/5: R$ 25 - PENDENTE');
    console.log('   3. üîç Total do modal: R$ 200 (n√£o R$ 100)');
    console.log('');
    console.log('FASE 5 - TESTE DE CARN√ä:');
    console.log('   1. üìÑ Gerar carn√™ da doa√ß√£o recorrente');
    console.log('   2. üìÑ Verificar se mostra 5 parcelas:');
    console.log('      ‚Üí Venc: Imediato, Valor: R$ 100 (1¬™ parcela)');
    console.log('      ‚Üí Venc: 21/10/2025, Valor: R$ 25 (2¬™ parcela)');
    console.log('      ‚Üí Venc: 20/11/2025, Valor: R$ 25 (3¬™ parcela)');
    console.log('      ‚Üí ... e assim por diante');
    console.log('   3. üìÑ QR Code PIX funcionando');
}

// ================================================================
// 6. RESUMO EXECUTIVO
// ================================================================

function gerarResumoExecutivo() {
    console.log('\n6Ô∏è‚É£  Resumo executivo do diagn√≥stico...\n');
    
    console.log('üìã RESUMO EXECUTIVO - SISTEMA v2.1.1:');
    console.log('');
    console.log('‚úÖ PONTOS FORTES:');
    console.log('   ‚úÖ Banco de dados limpo e estruturado');
    console.log('   ‚úÖ C√≥digo atualizado com corre√ß√µes v2.1.1');
    console.log('   ‚úÖ Sistema base (doa√ß√µes √∫nicas) 100% funcional');
    console.log('   ‚úÖ Carn√™ banc√°rio com QR Code PIX funcionando');
    console.log('   ‚úÖ L√≥gica de parcelas teoricamente correta');
    console.log('');
    console.log('üß™ TESTES NECESS√ÅRIOS:');
    console.log('   üî≤ Doa√ß√£o recorrente n√£o testada p√≥s-corre√ß√µes');
    console.log('   üî≤ Modal de hist√≥rico precisa ser validado');
    console.log('   üî≤ Dashboard precisa ser verificado com parcelas');
    console.log('');
    console.log('üéØ PR√ìXIMA A√á√ÉO RECOMENDADA:');
    console.log('   ‚Üí EXECUTAR TESTE COMPLETO de doa√ß√£o recorrente');
    console.log('   ‚Üí Se aprovado: Sistema 100% operacional');
    console.log('   ‚Üí Se reprovado: Ajustes pontuais necess√°rios');
    console.log('');
    console.log('üìä N√çVEL DE CONFIAN√áA: 90%');
    console.log('   (Alto - baseado nas corre√ß√µes aplicadas)');
}

// ================================================================
// EXECU√á√ÉO DO DIAGN√ìSTICO COMPLETO
// ================================================================

async function executarDiagnosticoCompleto() {
    try {
        verificarCorrecoesAplicadas();
        await analisarBancoLimpo();
        analisarImplementacaoCorre√ß√µes();
        identificarProblemasRemanescentes();
        gerarPlanoTeste();
        gerarResumoExecutivo();
        
        console.log('\n' + '‚ïê'.repeat(66));
        console.log('‚úÖ DIAGN√ìSTICO COMPLETO v2.1.1 FINALIZADO!');
        console.log('‚ïê'.repeat(66));
        
        console.log('\nüöÄ COMANDOS PARA CONTINUAR:');
        console.log('');
        console.log('# Iniciar sistema:');
        console.log('npm start');
        console.log('');
        console.log('# Acessar interface:');
        console.log('http://localhost:3001');
        console.log('');
        console.log('# Estado esperado:');
        console.log('- Dashboard: 0 doa√ß√µes, R$ 0 arrecadado');
        console.log('- Banco: Tabelas vazias (p√≥s-limpeza)');
        console.log('- Sistema: Pronto para teste de doa√ß√£o recorrente');
        
        console.log('\nüéØ DECIS√ÉO RECOMENDADA:');
        console.log('EXECUTAR TESTE IMEDIATO da doa√ß√£o recorrente');
        console.log('com dados: Jo√£o Recorrente, R$ 100 + 4√óR$ 25');
        
    } catch (error) {
        console.error('\n‚ùå Erro durante diagn√≥stico completo:', error);
        console.log('\nüîß SOLU√á√ÉO:');
        console.log('1. Verificar se servidor est√° parado (npm start)');
        console.log('2. Verificar se arquivo database/doacoes.db existe');
        console.log('3. Verificar permiss√µes da pasta database/');
    }
}

// Executar diagn√≥stico completo
executarDiagnosticoCompleto();