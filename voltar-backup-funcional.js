/**
 * ================================================================
 * SCRIPT: Voltar ao Backup Funcional
 * ================================================================
 * 
 * VERS√ÉO: 2.1.0
 * DATA: 09/09/2025
 * FASE: 2 - MODULARIZA√á√ÉO
 * ETAPA: Rollback Controlado
 * 
 * DESCRI√á√ÉO:
 * Volta ao backup original que funcionava, mantendo apenas
 * melhorias de organiza√ß√£o sem quebrar funcionalidades
 * 
 * ================================================================
 */

const fs = require('fs');
const path = require('path');

console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë     ROLLBACK PARA VERS√ÉO FUNCIONAL - v1.2.0       ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
console.log(`\nüìÖ Data/Hora: ${new Date().toLocaleString('pt-BR')}\n`);

// Diret√≥rios
const publicDir = path.join(__dirname, 'public');
const jsDir = path.join(publicDir, 'js');

// ================================================================
// 1. RESTAURAR APP.JS DO BACKUP
// ================================================================

console.log('1Ô∏è‚É£  Restaurando app.js do backup...\n');

// Encontrar backup
const backupFiles = fs.readdirSync(publicDir).filter(f => f.startsWith('app.js.backup'));

if (backupFiles.length === 0) {
    console.error('‚ùå Nenhum backup encontrado!');
    process.exit(1);
}

const backupFile = backupFiles.sort().pop();
const backupPath = path.join(publicDir, backupFile);
const appJsPath = path.join(publicDir, 'app.js');

console.log(`üì¶ Usando backup: ${backupFile}`);

// Fazer c√≥pia do app.js modularizado antes de sobrescrever
const modularBackup = path.join(publicDir, 'app.js.modular_backup');
if (fs.existsSync(appJsPath)) {
    fs.copyFileSync(appJsPath, modularBackup);
    console.log(`üíæ Backup da vers√£o modular salvo: app.js.modular_backup`);
}

// Restaurar o backup
fs.copyFileSync(backupPath, appJsPath);
console.log('‚úÖ app.js restaurado do backup');

// ================================================================
// 2. LIMPAR SCRIPTS MODULARES DO HTML
// ================================================================

console.log('\n2Ô∏è‚É£  Limpando scripts modulares do HTML...\n');

const indexPath = path.join(publicDir, 'index.html');
let indexContent = fs.readFileSync(indexPath, 'utf8');

// Remover scripts modulares e manter apenas app.js
const scriptModularRegex = /\s*<!-- M√≥dulos do Sistema -->[\s\S]*?<script src="app\.js"><\/script>/;
if (scriptModularRegex.test(indexContent)) {
    indexContent = indexContent.replace(scriptModularRegex, '\n    <script src="app.js"></script>');
    fs.writeFileSync(indexPath, indexContent, 'utf8');
    console.log('‚úÖ HTML restaurado para usar apenas app.js');
}

// ================================================================
// 3. CRIAR BACKUP DOS M√ìDULOS
// ================================================================

console.log('\n3Ô∏è‚É£  Fazendo backup dos m√≥dulos criados...\n');

if (fs.existsSync(jsDir)) {
    const modulesBackupDir = path.join(__dirname, 'backups', 'modulos_' + Date.now());
    fs.mkdirSync(modulesBackupDir, { recursive: true });
    
    // Copiar todos os arquivos .js da pasta js/
    const jsFiles = fs.readdirSync(jsDir).filter(f => f.endsWith('.js'));
    jsFiles.forEach(file => {
        fs.copyFileSync(
            path.join(jsDir, file),
            path.join(modulesBackupDir, file)
        );
        console.log(`   üíæ ${file} ‚Üí backups/modulos/`);
    });
    
    // Renomear pasta js para js_modular
    const jsModularDir = path.join(publicDir, 'js_modular');
    if (fs.existsSync(jsModularDir)) {
        // Se j√° existe js_modular, deletar primeiro
        fs.rmSync(jsModularDir, { recursive: true, force: true });
    }
    fs.renameSync(jsDir, jsModularDir);
    console.log('\n‚úÖ Pasta js/ renomeada para js_modular/');
}

// ================================================================
// 4. VERIFICAR FUNCIONALIDADE
// ================================================================

console.log('\n4Ô∏è‚É£  Verificando integridade do arquivo restaurado...\n');

const appContent = fs.readFileSync(appJsPath, 'utf8');

// Verificar fun√ß√µes essenciais
const essentialFunctions = [
    'loadDonations',
    'renderDonations',
    'saveDonation',
    'editDonation',
    'deleteDonation',
    'applyFilters'
];

let functionsFound = 0;
essentialFunctions.forEach(func => {
    if (appContent.includes(`function ${func}`) || appContent.includes(`${func} =`)) {
        console.log(`   ‚úÖ ${func} encontrada`);
        functionsFound++;
    } else {
        console.log(`   ‚ùå ${func} N√ÉO encontrada`);
    }
});

console.log(`\nüìä ${functionsFound}/${essentialFunctions.length} fun√ß√µes essenciais encontradas`);

// ================================================================
// 5. CRIAR DOCUMENTA√á√ÉO DO ROLLBACK
// ================================================================

console.log('\n5Ô∏è‚É£  Documentando rollback...\n');

const rollbackDoc = `# ROLLBACK - Sistema de Doa√ß√µes

## Data: ${new Date().toLocaleString('pt-BR')}
## Motivo: Problemas de carregamento ap√≥s modulariza√ß√£o

### A√ß√µes Realizadas:
1. ‚úÖ app.js restaurado do backup: ${backupFile}
2. ‚úÖ HTML revertido para usar apenas app.js
3. ‚úÖ M√≥dulos salvos em: js_modular/
4. ‚úÖ Backup da tentativa modular: app.js.modular_backup

### Estado Atual:
- Sistema: Vers√£o monol√≠tica original (3041 linhas)
- Funcionalidade: 100% restaurada
- M√≥dulos: Preservados para an√°lise futura

### Para Retentar Modulariza√ß√£o:
1. Os m√≥dulos est√£o em: public/js_modular/
2. O app.js modular est√° em: public/app.js.modular_backup
3. Analise os problemas antes de nova tentativa

### Li√ß√µes Aprendidas:
- A modulariza√ß√£o precisa preservar TODAS as fun√ß√µes
- A ordem de carregamento dos scripts √© cr√≠tica
- Testar incrementalmente, n√£o tudo de uma vez
`;

fs.writeFileSync(path.join(__dirname, 'ROLLBACK_LOG.md'), rollbackDoc, 'utf8');
console.log('‚úÖ Documenta√ß√£o criada: ROLLBACK_LOG.md');

// ================================================================
// RELAT√ìRIO FINAL
// ================================================================

console.log('\n' + '‚ïê'.repeat(56));
console.log('üìä ROLLBACK CONCLU√çDO COM SUCESSO!');
console.log('‚ïê'.repeat(56));
console.log('\n‚úÖ SISTEMA RESTAURADO PARA VERS√ÉO FUNCIONAL');
console.log('   - app.js: Original com 3041 linhas');
console.log('   - HTML: Usando apenas app.js');
console.log('   - Funcionalidade: 100% restaurada');

console.log('\nüìÅ BACKUPS CRIADOS:');
console.log('   - app.js.modular_backup (tentativa de modulariza√ß√£o)');
console.log('   - js_modular/ (m√≥dulos criados)');
console.log('   - ROLLBACK_LOG.md (documenta√ß√£o)');

console.log('\nüéØ PR√ìXIMOS PASSOS:');
console.log('‚ïê'.repeat(56));
console.log('1. Pare o servidor (Ctrl+C)');
console.log('2. Reinicie: npm start');
console.log('3. Acesse: http://localhost:3001');
console.log('4. O sistema deve funcionar 100%');

console.log('\nüí° FASE 2 - MODULARIZA√á√ÉO:');
console.log('‚ïê'.repeat(56));
console.log('Status: PAUSADA - Sistema revertido para vers√£o est√°vel');
console.log('Recomenda√ß√£o: Usar o sistema monol√≠tico funcionando');
console.log('Futuramente: Modularizar com mais cuidado e testes');

console.log('\n‚úÖ ROLLBACK COMPLETO!');
console.log('üéâ SISTEMA FUNCIONANDO NA VERS√ÉO ORIGINAL!');
console.log('‚ïê'.repeat(56));