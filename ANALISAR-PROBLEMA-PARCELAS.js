// ============================================================================
// AN√ÅLISE DO PROBLEMA DAS PARCELAS RECORRENTES
// Data: 06/09/2025
// Problema: Parcelas n√£o aparecem no modal e n√£o geram no carn√™
// Objetivo: Analisar o fluxo completo: Modal ‚Üí Backend ‚Üí Banco ‚Üí Carn√™
// ============================================================================

const fs = require('fs');

console.log('üîç AN√ÅLISE: PROBLEMA DAS PARCELAS RECORRENTES');
console.log('‚ïê'.repeat(60));
console.log('üìã Investigando fluxo: Modal ‚Üí Backend ‚Üí Banco ‚Üí Carn√™');
console.log('');

// ============================================================================
// 1. ANALISAR MODAL DE NOVA DOA√á√ÉO (Frontend)
// ============================================================================

function analisarModalFrontend() {
    console.log('1Ô∏è‚É£ ANALISANDO MODAL DE NOVA DOA√á√ÉO (Frontend)...');
    
    try {
        const indexContent = fs.readFileSync('./public/index.html', 'utf-8');
        
        // Verificar se existem campos de parcelas
        const verificacoes = [
            { nome: 'Checkbox "Doa√ß√£o Recorrente"', busca: 'input-recurrent' },
            { nome: 'Campo "Quantas parcelas"', busca: 'input-parcelas' },
            { nome: 'Campo "Pr√≥xima parcela"', busca: 'input-proxima-parcela' },
            { nome: 'Div campos recorrentes', busca: 'recurring-fields' },
            { nome: 'Fun√ß√£o toggleRecurringFields', busca: 'toggleRecurringFields' }
        ];
        
        console.log('   üìã VERIFICANDO CAMPOS NO MODAL:');
        verificacoes.forEach(v => {
            const encontrado = indexContent.includes(v.busca);
            const status = encontrado ? '‚úÖ' : '‚ùå';
            console.log(`      ${status} ${v.nome}`);
        });
        
        // Verificar se a fun√ß√£o toggleRecurringFields existe
        if (indexContent.includes('toggleRecurringFields')) {
            console.log('\n   üîç LOCALIZANDO FUN√á√ÉO toggleRecurringFields:');
            const funcMatch = indexContent.match(/function toggleRecurringFields\(\)[^}]*{[^}]*}/);
            if (funcMatch) {
                console.log('      ‚úÖ Fun√ß√£o encontrada no HTML');
                console.log('      üìù Trecho da fun√ß√£o:');
                console.log('         ' + funcMatch[0].substring(0, 100) + '...');
            } else {
                console.log('      ‚ùå Fun√ß√£o n√£o implementada corretamente');
            }
        }
        
        return indexContent.includes('input-parcelas') && indexContent.includes('input-recurrent');
        
    } catch (error) {
        console.log(`   ‚ùå Erro ao analisar modal: ${error.message}`);
        return false;
    }
}

// ============================================================================
// 2. ANALISAR FUN√á√ÉO addDonation (Backend/Frontend)
// ============================================================================

function analisarFuncaoAddDonation() {
    console.log('\n2Ô∏è‚É£ ANALISANDO FUN√á√ÉO addDonation (Backend/Frontend)...');
    
    try {
        const appContent = fs.readFileSync('./public/app.js', 'utf-8');
        
        // Procurar pela fun√ß√£o addDonation
        const addDonationMatch = appContent.match(/function addDonation\(\)[^}]*{[\s\S]*?(?=\nfunction|\nwindow\.|$)/);
        
        if (addDonationMatch) {
            console.log('   ‚úÖ Fun√ß√£o addDonation encontrada');
            
            const funcaoConteudo = addDonationMatch[0];
            
            // Verificar se coleta dados das parcelas
            const verificacoesParcelas = [
                { nome: 'Checkbox recorrente', busca: 'input-recurrent' },
                { nome: 'N√∫mero de parcelas', busca: 'input-parcelas' },
                { nome: 'Pr√≥xima parcela', busca: 'input-proxima-parcela' },
                { nome: 'Campo "recorrente"', busca: 'recorrente' },
                { nome: 'Campo "parcelas"', busca: 'parcelas' }
            ];
            
            console.log('\n   üìã VERIFICANDO COLETA DE DADOS DAS PARCELAS:');
            verificacoesParcelas.forEach(v => {
                const encontrado = funcaoConteudo.includes(v.busca);
                const status = encontrado ? '‚úÖ' : '‚ùå';
                console.log(`      ${status} ${v.nome}`);
            });
            
            // Verificar se envia dados para o backend
            if (funcaoConteudo.includes('fetch') && funcaoConteudo.includes('/api/doacoes')) {
                console.log('\n   ‚úÖ Fun√ß√£o faz requisi√ß√£o para /api/doacoes');
                
                // Verificar estrutura dos dados enviados
                const fetchMatch = funcaoConteudo.match(/fetch\([^}]*\{[\s\S]*?\}\)/);
                if (fetchMatch) {
                    console.log('   üì¶ DADOS ENVIADOS:');
                    console.log('      ' + fetchMatch[0].substring(0, 200) + '...');
                }
            } else {
                console.log('\n   ‚ùå Fun√ß√£o n√£o faz requisi√ß√£o para API');
            }
            
            return true;
        } else {
            console.log('   ‚ùå Fun√ß√£o addDonation N√ÉO ENCONTRADA');
            return false;
        }
        
    } catch (error) {
        console.log(`   ‚ùå Erro ao analisar fun√ß√£o: ${error.message}`);
        return false;
    }
}

// ============================================================================
// 3. ANALISAR ROTA DO BACKEND (server.js)
// ============================================================================

function analisarRotaBackend() {
    console.log('\n3Ô∏è‚É£ ANALISANDO ROTA DO BACKEND (server.js)...');
    
    try {
        const serverContent = fs.readFileSync('./server.js', 'utf-8');
        
        // Procurar pela rota POST /api/doacoes
        const rotaMatch = serverContent.match(/app\.post\(['"]/api/doacoes['"][^}]*{[\s\S]*?(?=app\.|$)/);
        
        if (rotaMatch) {
            console.log('   ‚úÖ Rota POST /api/doacoes encontrada');
            
            const rotaConteudo = rotaMatch[0];
            
            // Verificar se processa campos de parcelas
            const verificacoesCampos = [
                { nome: 'Campo "recorrente"', busca: 'recorrente' },
                { nome: 'Campo "parcelas"', busca: 'parcelas' },
                { nome: 'Valida√ß√£o de parcelas', busca: 'parcelas' },
                { nome: 'INSERT na tabela doacoes', busca: 'INSERT INTO doacoes' }
            ];
            
            console.log('\n   üìã VERIFICANDO PROCESSAMENTO DAS PARCELAS:');
            verificacoesCampos.forEach(v => {
                const encontrado = rotaConteudo.includes(v.busca);
                const status = encontrado ? '‚úÖ' : '‚ùå';
                console.log(`      ${status} ${v.nome}`);
            });
            
            // Verificar estrutura do INSERT
            const insertMatch = rotaConteudo.match(/INSERT INTO doacoes[^;]*;/);
            if (insertMatch) {
                console.log('\n   üìù ESTRUTURA DO INSERT:');
                console.log('      ' + insertMatch[0]);
            }
            
            return true;
        } else {
            console.log('   ‚ùå Rota POST /api/doacoes N√ÉO ENCONTRADA');
            return false;
        }
        
    } catch (error) {
        console.log(`   ‚ùå Erro ao analisar rota: ${error.message}`);
        return false;
    }
}

// ============================================================================
// 4. ANALISAR ESTRUTURA DO BANCO DE DADOS
// ============================================================================

function analisarEstruturaBanco() {
    console.log('\n4Ô∏è‚É£ ANALISANDO ESTRUTURA DO BANCO DE DADOS...');
    
    try {
        const serverContent = fs.readFileSync('./server.js', 'utf-8');
        
        // Procurar pela cria√ß√£o da tabela doacoes
        const tabelaMatch = serverContent.match(/CREATE TABLE IF NOT EXISTS doacoes[\s\S]*?\);/);
        
        if (tabelaMatch) {
            console.log('   ‚úÖ Estrutura da tabela doacoes encontrada');
            console.log('\n   üìù ESTRUTURA DA TABELA DOACOES:');
            
            const estrutura = tabelaMatch[0];
            console.log('      ' + estrutura.replace(/\n/g, '\n      '));
            
            // Verificar se tem campos para parcelas
            const camposParcelas = [
                'recorrente',
                'parcelas',
                'proxima_parcela'
            ];
            
            console.log('\n   üìã VERIFICANDO CAMPOS PARA PARCELAS:');
            camposParcelas.forEach(campo => {
                const encontrado = estrutura.includes(campo);
                const status = encontrado ? '‚úÖ' : '‚ùå';
                console.log(`      ${status} Campo "${campo}"`);
            });
            
            return camposParcelas.every(campo => estrutura.includes(campo));
        } else {
            console.log('   ‚ùå Estrutura da tabela doacoes N√ÉO ENCONTRADA');
            return false;
        }
        
    } catch (error) {
        console.log(`   ‚ùå Erro ao analisar banco: ${error.message}`);
        return false;
    }
}

// ============================================================================
// 5. ANALISAR FUN√á√ÉO generateCarne
// ============================================================================

function analisarFuncaoGenerateCarne() {
    console.log('\n5Ô∏è‚É£ ANALISANDO FUN√á√ÉO generateCarne...');
    
    try {
        const appContent = fs.readFileSync('./public/app.js', 'utf-8');
        
        // Procurar pela fun√ß√£o generateCarne
        const carneMatch = appContent.match(/function generateCarne\([^}]*{[\s\S]*?(?=\nfunction|\nwindow\.|$)/);
        
        if (carneMatch) {
            console.log('   ‚úÖ Fun√ß√£o generateCarne encontrada');
            
            const funcaoConteudo = carneMatch[0];
            
            // Verificar se usa dados de parcelas
            const verificacoesCarne = [
                { nome: 'Busca dados da doa√ß√£o', busca: '/api/doacoes/' },
                { nome: 'Usa campo "parcelas"', busca: 'parcelas' },
                { nome: 'Usa campo "recorrente"', busca: 'recorrente' },
                { nome: 'Gera m√∫ltiplas parcelas', busca: 'for' },
                { nome: 'Calcula vencimentos', busca: 'Date' }
            ];
            
            console.log('\n   üìã VERIFICANDO USO DAS PARCELAS NO CARN√ä:');
            verificacoesCarne.forEach(v => {
                const encontrado = funcaoConteudo.includes(v.busca);
                const status = encontrado ? '‚úÖ' : '‚ùå';
                console.log(`      ${status} ${v.nome}`);
            });
            
            // Verificar se tem l√≥gica para m√∫ltiplas parcelas
            if (funcaoConteudo.includes('for') && funcaoConteudo.includes('parcelas')) {
                console.log('\n   ‚úÖ Fun√ß√£o tem l√≥gica para m√∫ltiplas parcelas');
            } else {
                console.log('\n   ‚ùå Fun√ß√£o N√ÉO tem l√≥gica para m√∫ltiplas parcelas');
            }
            
            return true;
        } else {
            console.log('   ‚ùå Fun√ß√£o generateCarne N√ÉO ENCONTRADA');
            return false;
        }
        
    } catch (error) {
        console.log(`   ‚ùå Erro ao analisar fun√ß√£o: ${error.message}`);
        return false;
    }
}

// ============================================================================
// 6. TESTAR DADOS EXISTENTES NO BANCO
// ============================================================================

function sugerirTesteBanco() {
    console.log('\n6Ô∏è‚É£ SUGEST√ÉO DE TESTE DO BANCO DE DADOS...');
    
    console.log('\n   üß™ PARA TESTAR DADOS NO BANCO:');
    console.log('      1. Inicie o servidor: npm start');
    console.log('      2. Abra o browser em: http://localhost:3001');
    console.log('      3. Abra DevTools (F12) ‚Üí Console');
    console.log('      4. Execute:');
    console.log('         fetch("/api/doacoes").then(r=>r.json()).then(console.log)');
    console.log('      5. Verifique se as doa√ß√µes t√™m campos "parcelas" e "recorrente"');
    console.log('');
    console.log('   üìã PARA VERIFICAR ESTRUTURA DA TABELA:');
    console.log('      1. No console do DevTools, execute:');
    console.log('         fetch("/api/debug/schema").then(r=>r.text()).then(console.log)');
    console.log('      2. Ou acesse diretamente: http://localhost:3001/api/debug/schema');
}

// ============================================================================
// 7. GERAR RELAT√ìRIO COMPLETO
// ============================================================================

function gerarRelatorioCompleto(modal, addDonation, rota, banco, carne) {
    console.log('\nüìä RELAT√ìRIO COMPLETO DA AN√ÅLISE');
    console.log('‚ïê'.repeat(60));
    
    console.log('\nüéØ RESUMO DOS PROBLEMAS ENCONTRADOS:');
    console.log(`   ${modal ? '‚úÖ' : '‚ùå'} 1. Modal com campos de parcelas`);
    console.log(`   ${addDonation ? '‚úÖ' : '‚ùå'} 2. Fun√ß√£o addDonation coleta parcelas`);
    console.log(`   ${rota ? '‚úÖ' : '‚ùå'} 3. Rota backend processa parcelas`);
    console.log(`   ${banco ? '‚úÖ' : '‚ùå'} 4. Banco tem campos para parcelas`);
    console.log(`   ${carne ? '‚úÖ' : '‚ùå'} 5. Carn√™ usa dados das parcelas`);
    
    const pontuacao = [modal, addDonation, rota, banco, carne].filter(Boolean).length;
    const percentual = Math.round((pontuacao / 5) * 100);
    
    console.log(`\nüìä PONTUA√á√ÉO GERAL: ${pontuacao}/5 (${percentual}%)`);
    
    if (percentual < 60) {
        console.log('\nüö® PROBLEMA CR√çTICO IDENTIFICADO!');
        console.log('   üìã A√á√ïES NECESS√ÅRIAS:');
        
        if (!modal) console.log('      üîß Corrigir modal com campos de parcelas');
        if (!addDonation) console.log('      üîß Atualizar fun√ß√£o addDonation');
        if (!rota) console.log('      üîß Corrigir rota do backend');
        if (!banco) console.log('      üîß Atualizar estrutura do banco');
        if (!carne) console.log('      üîß Corrigir fun√ß√£o generateCarne');
        
    } else if (percentual < 80) {
        console.log('\n‚ö†Ô∏è PROBLEMAS PARCIAIS IDENTIFICADOS');
        console.log('   üí° Ajustes necess√°rios em algumas partes');
        
    } else {
        console.log('\n‚úÖ SISTEMA APARENTEMENTE CORRETO');
        console.log('   üîç Problema pode ser em dados espec√≠ficos ou l√≥gica');
    }
    
    console.log('\nüí° PR√ìXIMOS PASSOS RECOMENDADOS:');
    console.log('   1Ô∏è‚É£ Execute o teste do banco sugerido acima');
    console.log('   2Ô∏è‚É£ Teste criar nova doa√ß√£o recorrente');
    console.log('   3Ô∏è‚É£ Verifique se dados s√£o salvos corretamente');
    console.log('   4Ô∏è‚É£ Teste gera√ß√£o do carn√™');
    console.log('   5Ô∏è‚É£ Com base nos resultados, aplicar corre√ß√µes espec√≠ficas');
}

// ============================================================================
// EXECU√á√ÉO PRINCIPAL
// ============================================================================

function main() {
    console.log('üîß Iniciando an√°lise completa...\n');
    
    // Executar todas as an√°lises
    const modal = analisarModalFrontend();
    const addDonation = analisarFuncaoAddDonation();
    const rota = analisarRotaBackend();
    const banco = analisarEstruturaBanco();
    const carne = analisarFuncaoGenerateCarne();
    
    // Sugest√µes de teste
    sugerirTesteBanco();
    
    // Relat√≥rio final
    gerarRelatorioCompleto(modal, addDonation, rota, banco, carne);
    
    console.log('\n‚ú® AN√ÅLISE COMPLETA FINALIZADA!');
    console.log('üìå Execute os testes sugeridos para confirmar diagn√≥stico');
}

// Executar an√°lise
main();