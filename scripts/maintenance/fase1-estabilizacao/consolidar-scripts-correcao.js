/**
 * ================================================================
 * SCRIPT: Consolidar Scripts de Corre√ß√£o
 * ================================================================
 * 
 * VERS√ÉO: 1.0.0
 * DATA: 08/09/2025
 * FASE: 1 - ESTABILIZA√á√ÉO
 * ETAPA: 1.4 - Consolidar Scripts de Corre√ß√£o
 * 
 * DESCRI√á√ÉO:
 * Organiza todos os scripts de corre√ß√£o criados, remove arquivos
 * tempor√°rios, cria estrutura organizada e documenta tudo.
 * 
 * ================================================================
 */

const fs = require('fs');
const path = require('path');

console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë  CONSOLIDA√á√ÉO DE SCRIPTS - SISTEMA v1.1.5         ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
console.log(`\nüìÖ Data/Hora: ${new Date().toLocaleString('pt-BR')}\n`);

// Diret√≥rios
const SCRIPTS_DIR = path.join(__dirname, 'scripts');
const MAINTENANCE_DIR = path.join(SCRIPTS_DIR, 'maintenance');
const PHASE1_DIR = path.join(MAINTENANCE_DIR, 'fase1-estabilizacao');
const TEMP_DIR = path.join(__dirname, 'temp');
const DOCS_DIR = path.join(__dirname, 'docs');

// ================================================================
// 1. CRIAR ESTRUTURA DE DIRET√ìRIOS
// ================================================================

console.log('1Ô∏è‚É£  Criando estrutura de diret√≥rios...\n');

const directories = [
    SCRIPTS_DIR,
    MAINTENANCE_DIR,
    PHASE1_DIR,
    path.join(MAINTENANCE_DIR, 'utils'),
    path.join(MAINTENANCE_DIR, 'backup'),
    DOCS_DIR
];

directories.forEach(dir => {
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
        console.log(`   üìÅ Criado: ${path.relative(__dirname, dir)}`);
    } else {
        console.log(`   ‚úÖ Existe: ${path.relative(__dirname, dir)}`);
    }
});

// ================================================================
// 2. IDENTIFICAR SCRIPTS CRIADOS
// ================================================================

console.log('\n2Ô∏è‚É£  Identificando scripts de corre√ß√£o...\n');

// Scripts da Fase 1 criados hoje
const phase1Scripts = [
    'backup-sistema-completo.js',
    'diagnostico-erros-sintaxe.js',
    'corrigir-erros-sintaxe.js',
    'unificar-banco-dados.js',
    'unificar-banco-dados-v2.js',
    'consolidar-scripts-correcao.js'
];

// Scripts anteriores mencionados no hist√≥rico
const previousScripts = [
    'repair.js',
    'fix-codigo-doador.js',
    'implementar-edicao-historico.js',
    'adicionar-campos-endereco.js',
    'corrigir-viacep-edicao.js',
    'ajustar-edicao-endereco-tipos.js',
    'fix-dashboard-error-corrected.js',
    'restore-edit-carne-functions.js'
];

// Scripts tempor√°rios/teste
const tempScripts = [
    'teste.js',
    'test.js',
    'criar-server.js',
    'checkduplicates-server.js',
    'corrigir-checkduplicates-server.js',
    'verificar-estrutura.js'
];

let movedCount = 0;
let notFoundCount = 0;

// ================================================================
// 3. MOVER SCRIPTS PARA ESTRUTURA ORGANIZADA
// ================================================================

console.log('3Ô∏è‚É£  Organizando scripts...\n');

// Mover scripts da Fase 1
console.log('üì¶ Scripts da Fase 1 (Estabiliza√ß√£o):');
phase1Scripts.forEach(script => {
    const sourcePath = path.join(__dirname, script);
    const destPath = path.join(PHASE1_DIR, script);
    
    if (fs.existsSync(sourcePath)) {
        if (sourcePath !== destPath) {
            try {
                fs.copyFileSync(sourcePath, destPath);
                fs.unlinkSync(sourcePath);
                console.log(`   ‚úÖ ${script} ‚Üí fase1-estabilizacao/`);
                movedCount++;
            } catch (error) {
                console.log(`   ‚ö†Ô∏è  ${script} - Erro ao mover: ${error.message}`);
            }
        }
    } else {
        console.log(`   ‚ÑπÔ∏è  ${script} - N√£o encontrado`);
        notFoundCount++;
    }
});

// Mover scripts anteriores
console.log('\nüì¶ Scripts de corre√ß√µes anteriores:');
previousScripts.forEach(script => {
    const sourcePath = path.join(__dirname, script);
    const destPath = path.join(MAINTENANCE_DIR, 'utils', script);
    
    if (fs.existsSync(sourcePath)) {
        try {
            fs.copyFileSync(sourcePath, destPath);
            fs.unlinkSync(sourcePath);
            console.log(`   ‚úÖ ${script} ‚Üí utils/`);
            movedCount++;
        } catch (error) {
            console.log(`   ‚ö†Ô∏è  ${script} - Erro ao mover: ${error.message}`);
        }
    } else {
        notFoundCount++;
    }
});

// ================================================================
// 4. LIMPAR ARQUIVOS TEMPOR√ÅRIOS
// ================================================================

console.log('\n4Ô∏è‚É£  Limpando arquivos tempor√°rios...\n');

let cleanedCount = 0;

// Remover scripts tempor√°rios
tempScripts.forEach(script => {
    const filePath = path.join(__dirname, script);
    if (fs.existsSync(filePath)) {
        try {
            // Mover para pasta temp ao inv√©s de deletar
            if (!fs.existsSync(TEMP_DIR)) {
                fs.mkdirSync(TEMP_DIR);
            }
            fs.renameSync(filePath, path.join(TEMP_DIR, script));
            console.log(`   üóëÔ∏è  ${script} ‚Üí temp/`);
            cleanedCount++;
        } catch (error) {
            console.log(`   ‚ö†Ô∏è  ${script} - ${error.message}`);
        }
    }
});

// Limpar arquivos .bat
const batFiles = fs.readdirSync(__dirname).filter(f => f.endsWith('.bat'));
batFiles.forEach(bat => {
    const batPath = path.join(__dirname, bat);
    try {
        fs.unlinkSync(batPath);
        console.log(`   üóëÔ∏è  ${bat} - Removido`);
        cleanedCount++;
    } catch (error) {
        console.log(`   ‚ö†Ô∏è  ${bat} - ${error.message}`);
    }
});

// Limpar relat√≥rios JSON tempor√°rios
const jsonReports = ['diagnostico_sintaxe_report.json'];
jsonReports.forEach(report => {
    const reportPath = path.join(__dirname, report);
    if (fs.existsSync(reportPath)) {
        const destPath = path.join(DOCS_DIR, report);
        fs.renameSync(reportPath, destPath);
        console.log(`   üìÑ ${report} ‚Üí docs/`);
    }
});

// ================================================================
// 5. CRIAR DOCUMENTA√á√ÉO DOS SCRIPTS
// ================================================================

console.log('\n5Ô∏è‚É£  Criando documenta√ß√£o...\n');

const documentation = `# üìö DOCUMENTA√á√ÉO DOS SCRIPTS DE MANUTEN√á√ÉO

## Sistema de Doa√ß√µes v1.1.5
**Data de Organiza√ß√£o:** ${new Date().toLocaleDateString('pt-BR')}

---

## üìÅ ESTRUTURA DE SCRIPTS

\`\`\`
scripts/
‚îú‚îÄ‚îÄ init-database.js          # Inicializa√ß√£o do banco
‚îú‚îÄ‚îÄ upgrade-database.js        # Upgrade de estrutura
‚îî‚îÄ‚îÄ maintenance/
    ‚îú‚îÄ‚îÄ fase1-estabilizacao/   # Scripts da Fase 1
    ‚îÇ   ‚îú‚îÄ‚îÄ backup-sistema-completo.js
    ‚îÇ   ‚îú‚îÄ‚îÄ diagnostico-erros-sintaxe.js
    ‚îÇ   ‚îú‚îÄ‚îÄ corrigir-erros-sintaxe.js
    ‚îÇ   ‚îú‚îÄ‚îÄ unificar-banco-dados-v2.js
    ‚îÇ   ‚îî‚îÄ‚îÄ consolidar-scripts-correcao.js
    ‚îî‚îÄ‚îÄ utils/                 # Scripts utilit√°rios
        ‚îú‚îÄ‚îÄ repair.js
        ‚îú‚îÄ‚îÄ fix-codigo-doador.js
        ‚îî‚îÄ‚îÄ [outros scripts anteriores]
\`\`\`

---

## üîß FASE 1 - ESTABILIZA√á√ÉO

### 1. backup-sistema-completo.js
**Fun√ß√£o:** Cria backup completo do sistema
**Uso:** \`node scripts/maintenance/fase1-estabilizacao/backup-sistema-completo.js\`

### 2. diagnostico-erros-sintaxe.js
**Fun√ß√£o:** Analisa app.js e identifica problemas
**Uso:** \`node scripts/maintenance/fase1-estabilizacao/diagnostico-erros-sintaxe.js\`

### 3. corrigir-erros-sintaxe.js
**Fun√ß√£o:** Corrige erros identificados no diagn√≥stico
**Uso:** \`node scripts/maintenance/fase1-estabilizacao/corrigir-erros-sintaxe.js\`

### 4. unificar-banco-dados-v2.js
**Fun√ß√£o:** Remove bancos duplicados e unifica refer√™ncias
**Uso:** \`node scripts/maintenance/fase1-estabilizacao/unificar-banco-dados-v2.js\`

### 5. consolidar-scripts-correcao.js
**Fun√ß√£o:** Organiza todos os scripts de corre√ß√£o
**Uso:** \`node scripts/maintenance/fase1-estabilizacao/consolidar-scripts-correcao.js\`

---

## üìã ORDEM DE EXECU√á√ÉO RECOMENDADA

### Para Manuten√ß√£o Completa:
1. \`backup-sistema-completo.js\` - Sempre fazer backup primeiro
2. \`diagnostico-erros-sintaxe.js\` - Identificar problemas
3. \`corrigir-erros-sintaxe.js\` - Aplicar corre√ß√µes
4. \`unificar-banco-dados-v2.js\` - Limpar bancos duplicados
5. Testar sistema: \`npm start\`

### Para Problemas Espec√≠ficos:
- **Erro no banco:** \`repair.js\` ou \`fix-codigo-doador.js\`
- **Dashboard travado:** \`fix-dashboard-error-corrected.js\`
- **Fun√ß√µes faltando:** \`restore-edit-carne-functions.js\`

---

## ‚ö†Ô∏è AVISOS IMPORTANTES

1. **SEMPRE** fa√ßa backup antes de executar scripts de corre√ß√£o
2. **TESTE** o sistema ap√≥s cada corre√ß√£o
3. **DOCUMENTE** qualquer novo script criado
4. **PRESERVE** scripts antigos em utils/ para refer√™ncia

---

## üìä ESTAT√çSTICAS

- Total de scripts organizados: ${movedCount}
- Scripts de corre√ß√£o da Fase 1: ${phase1Scripts.length}
- Scripts utilit√°rios preservados: ${previousScripts.filter(s => fs.existsSync(path.join(MAINTENANCE_DIR, 'utils', s))).length}
- Arquivos tempor√°rios limpos: ${cleanedCount}

---

**√öltima Atualiza√ß√£o:** ${new Date().toISOString()}
`;

const docPath = path.join(DOCS_DIR, 'SCRIPTS_MANUTENCAO.md');
fs.writeFileSync(docPath, documentation, 'utf8');
console.log('‚úÖ Documenta√ß√£o criada: docs/SCRIPTS_MANUTENCAO.md');

// ================================================================
// 6. ATUALIZAR PLANO DE REFATORA√á√ÉO
// ================================================================

console.log('\n6Ô∏è‚É£  Atualizando plano de refatora√ß√£o...\n');

// Atualizar status no plano
const planoPath = path.join(__dirname, 'PLANO_REFATORACAO_SISTEMA.md');
if (fs.existsSync(planoPath)) {
    let planoContent = fs.readFileSync(planoPath, 'utf8');
    
    // Marcar etapas conclu√≠das
    planoContent = planoContent.replace('**Status:** PENDENTE', '**Status:** CONCLU√çDO');
    planoContent = planoContent.replace('#### 1.1 - Backup Completo ‚úÖ', '#### 1.1 - Backup Completo ‚úÖ CONCLU√çDO');
    planoContent = planoContent.replace('#### 1.2 - Identificar Erros de Sintaxe', '#### 1.2 - Identificar Erros de Sintaxe ‚úÖ CONCLU√çDO');
    planoContent = planoContent.replace('#### 1.3 - Remover Banco Duplicado', '#### 1.3 - Remover Banco Duplicado ‚úÖ CONCLU√çDO');
    planoContent = planoContent.replace('#### 1.4 - Consolidar Scripts de Corre√ß√£o', '#### 1.4 - Consolidar Scripts de Corre√ß√£o ‚úÖ CONCLU√çDO');
    planoContent = planoContent.replace('**Progresso:** ‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 10%', '**Progresso:** ‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 40%');
    
    fs.writeFileSync(planoPath, planoContent, 'utf8');
    console.log('‚úÖ Plano de refatora√ß√£o atualizado');
} else {
    console.log('‚ÑπÔ∏è  Arquivo PLANO_REFATORACAO_SISTEMA.md n√£o encontrado');
}

// ================================================================
// RELAT√ìRIO FINAL
// ================================================================

console.log('\n' + '‚ïê'.repeat(56));
console.log('üìä RELAT√ìRIO DE CONSOLIDA√á√ÉO:');
console.log('‚ïê'.repeat(56));
console.log(`üìÅ Scripts organizados: ${movedCount}`);
console.log(`üóëÔ∏è  Arquivos limpos: ${cleanedCount}`);
console.log(`üìÑ Documenta√ß√£o criada: 1`);
console.log(`\n‚úÖ FASE 1 - ESTABILIZA√á√ÉO CONCLU√çDA!`);

console.log('\nüéØ STATUS DO SISTEMA:');
console.log('‚ïê'.repeat(56));
console.log('‚úÖ Backup completo realizado');
console.log('‚úÖ Erros de sintaxe corrigidos');
console.log('‚úÖ Banco de dados unificado');
console.log('‚úÖ Scripts organizados');

console.log('\nüìã PR√ìXIMOS PASSOS (FASE 2 - MODULARIZA√á√ÉO):');
console.log('‚ïê'.repeat(56));
console.log('1. Testar sistema completo: npm start');
console.log('2. Verificar todas as funcionalidades');
console.log('3. Iniciar modulariza√ß√£o do app.js (3041 linhas)');
console.log('4. Criar estrutura modular em public/js/');

console.log('\nüéâ FASE 1 COMPLETADA COM SUCESSO!');
console.log('‚ïê'.repeat(56));