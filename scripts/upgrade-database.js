const sqlite3 = require('sqlite3').verbose();

// Conectar ao banco de dados
const db = new sqlite3.Database('./database/doacoes.db', (err) => {
  if (err) {
    console.error('Erro ao conectar com o banco de dados:', err.message);
  } else {
    console.log('Conectado ao banco de dados SQLite.');
  }
});

db.serialize(() => {
  console.log('üîÑ Iniciando upgrade do banco de dados...');
  
  // 1. Adicionar coluna CPF na tabela doadores (se n√£o existir)
  db.run(`ALTER TABLE doadores ADD COLUMN cpf TEXT`, (err) => {
    if (err && !err.message.includes('duplicate column name')) {
      console.error('Erro ao adicionar coluna CPF:', err.message);
    } else {
      console.log('‚úÖ Coluna CPF adicionada/verificada');
    }
  });
  
  // 2. Adicionar coluna ID vis√≠vel na tabela doadores (se n√£o existir)
  db.run(`ALTER TABLE doadores ADD COLUMN codigo_doador TEXT UNIQUE`, (err) => {
    if (err && !err.message.includes('duplicate column name')) {
      console.error('Erro ao adicionar coluna codigo_doador:', err.message);
    } else {
      console.log('‚úÖ Coluna codigo_doador adicionada/verificada');
    }
  });
  
  // 3. Gerar c√≥digos para doadores existentes (se n√£o tiverem)
  db.all('SELECT id, nome FROM doadores WHERE codigo_doador IS NULL OR codigo_doador = ""', [], (err, rows) => {
    if (err) {
      console.error('Erro ao buscar doadores:', err.message);
      return;
    }
    
    console.log(`üîÑ Atualizando ${rows.length} doadores sem c√≥digo...`);
    
    rows.forEach((row, index) => {
      // Gerar c√≥digo √∫nico: D + ID com padding + iniciais do nome
      const iniciais = row.nome.split(' ')
        .map(palavra => palavra.charAt(0).toUpperCase())
        .join('')
        .substring(0, 3); // M√°ximo 3 iniciais
      
      const codigo = `D${row.id.toString().padStart(3, '0')}-${iniciais}`;
      
      db.run(
        'UPDATE doadores SET codigo_doador = ? WHERE id = ?',
        [codigo, row.id],
        function(err) {
          if (err) {
            console.error(`Erro ao atualizar doador ${row.id}:`, err.message);
          } else {
            console.log(`‚úÖ Doador ${row.nome} ‚Üí C√≥digo: ${codigo}`);
          }
        }
      );
    });
  });
  
  // 4. Criar √≠ndices √∫nicos para evitar duplicatas
  db.run(`CREATE UNIQUE INDEX IF NOT EXISTS idx_doadores_cpf ON doadores(cpf) WHERE cpf IS NOT NULL AND cpf != ''`, (err) => {
    if (err) {
      console.error('Erro ao criar √≠ndice CPF:', err.message);
    } else {
      console.log('‚úÖ √çndice √∫nico CPF criado');
    }
  });
  
  db.run(`CREATE UNIQUE INDEX IF NOT EXISTS idx_doadores_codigo ON doadores(codigo_doador)`, (err) => {
    if (err) {
      console.error('Erro ao criar √≠ndice c√≥digo:', err.message);
    } else {
      console.log('‚úÖ √çndice √∫nico c√≥digo criado');
    }
  });
  
  // 5. Criar √≠ndice para busca por nome + telefone (detectar duplicatas)
  db.run(`CREATE INDEX IF NOT EXISTS idx_doadores_nome_telefone ON doadores(nome, telefone1)`, (err) => {
    if (err) {
      console.error('Erro ao criar √≠ndice nome+telefone:', err.message);
    } else {
      console.log('‚úÖ √çndice nome+telefone criado');
    }
  });
  
  console.log('üéâ Upgrade do banco de dados conclu√≠do!');
  console.log('');
  console.log('üìã Novos campos adicionados:');
  console.log('   - doadores.cpf (TEXT, UNIQUE)');
  console.log('   - doadores.codigo_doador (TEXT, UNIQUE)');
  console.log('');
  console.log('üîí Prote√ß√µes implementadas:');
  console.log('   - CPF √∫nico por doador');
  console.log('   - C√≥digo √∫nico gerado automaticamente');
  console.log('   - √çndices para detectar duplicatas');
  console.log('');
  console.log('‚úÖ Execute "npm start" para usar o sistema atualizado');
});

db.close((err) => {
  if (err) {
    console.error('Erro ao fechar o banco de dados:', err.message);
  } else {
    console.log('Conex√£o com o banco de dados fechada.');
  }
});