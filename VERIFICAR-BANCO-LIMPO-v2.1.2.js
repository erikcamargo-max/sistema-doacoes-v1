/**
 * ================================================================
 * SCRIPT: Verifica√ß√£o do Banco de Dados Limpo
 * ================================================================
 * 
 * VERS√ÉO: 2.1.2
 * DATA: 20/09/2025
 * OBJETIVO: Verificar se banco est√° limpo e explicar l√≥gica do modal
 * 
 * VERIFICA√á√ïES:
 * 1. Contar registros em todas as tabelas
 * 2. Mostrar estrutura das tabelas
 * 3. Explicar l√≥gica do modal de hist√≥rico
 * 4. Identificar poss√≠veis problemas no c√≥digo atual
 * 
 * ================================================================
 */

const fs = require('fs');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();

console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë        VERIFICA√á√ÉO BANCO LIMPO v2.1.2             ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
console.log(`\nüìÖ Data/Hora: ${new Date().toLocaleString('pt-BR')}\n`);

const dbPath = path.join(__dirname, 'database', 'doacoes.db');
const appJsPath = path.join(__dirname, 'public', 'app.js');

// ================================================================
// 1. VERIFICAR BANCO DE DADOS
// ================================================================

function verificarBanco() {
    return new Promise((resolve, reject) => {
        console.log('1Ô∏è‚É£ VERIFICANDO ESTADO DO BANCO DE DADOS...\n');
        
        if (!fs.existsSync(dbPath)) {
            console.log('‚ùå Banco de dados n√£o encontrado:', dbPath);
            resolve();
            return;
        }
        
        const db = new sqlite3.Database(dbPath, (err) => {
            if (err) {
                console.log('‚ùå Erro ao conectar:', err.message);
                reject(err);
                return;
            }
            
            console.log('‚úÖ Conectado ao banco SQLite');
            
            // Listar todas as tabelas
            db.all("SELECT name FROM sqlite_master WHERE type='table'", [], (err, tables) => {
                if (err) {
                    reject(err);
                    return;
                }
                
                console.log('\nüìã TABELAS ENCONTRADAS:');
                tables.forEach(table => {
                    console.log(`   - ${table.name}`);
                });
                
                // Verificar quantidade de registros em cada tabela
                const promises = tables.map(table => verificarTabela(db, table.name));
                
                Promise.all(promises).then(() => {
                    db.close();
                    resolve();
                }).catch(reject);
            });
        });
    });
}

function verificarTabela(db, tableName) {
    return new Promise((resolve) => {
        // Contar registros
        db.get(`SELECT COUNT(*) as count FROM ${tableName}`, [], (err, result) => {
            if (err) {
                console.log(`‚ùå Erro ao contar ${tableName}:`, err.message);
                resolve();
                return;
            }
            
            const count = result.count;
            const status = count === 0 ? '‚úÖ LIMPA' : `‚ö†Ô∏è  ${count} registros`;
            console.log(`   ${tableName}: ${status}`);
            
            // Se tem registros, mostrar exemplos
            if (count > 0) {
                db.all(`SELECT * FROM ${tableName} LIMIT 3`, [], (err, rows) => {
                    if (!err && rows.length > 0) {
                        console.log(`      Exemplos em ${tableName}:`);
                        rows.forEach((row, i) => {
                            const preview = JSON.stringify(row).substring(0, 100);
                            console.log(`        ${i + 1}. ${preview}...`);
                        });
                    }
                    resolve();
                });
            } else {
                resolve();
            }
        });
    });
}

// ================================================================
// 2. ANALISAR L√ìGICA DO MODAL DE HIST√ìRICO
// ================================================================

function analisarModalHistorico() {
    console.log('\n2Ô∏è‚É£ ANALISANDO L√ìGICA DO MODAL DE HIST√ìRICO...\n');
    
    if (!fs.existsSync(appJsPath)) {
        console.log('‚ùå app.js n√£o encontrado');
        return;
    }
    
    const appContent = fs.readFileSync(appJsPath, 'utf8');
    
    console.log('üîç PROCURANDO FUN√á√ÉO DE HIST√ìRICO DE PARCELAS...');
    
    // Procurar fun√ß√£o que carrega hist√≥rico
    const patterns = [
        /showHistoryWithParcelas/gi,
        /carregando hist√≥rico com parcelas/gi,
        /\/api\/doacoes\/.*\/historico/gi,
        /Hist√≥rico de Parcelas/gi
    ];
    
    patterns.forEach((pattern, index) => {
        const matches = appContent.match(pattern);
        if (matches) {
            console.log(`‚úÖ Padr√£o ${index + 1} encontrado: ${matches.length} ocorr√™ncias`);
        } else {
            console.log(`‚ùå Padr√£o ${index + 1} n√£o encontrado`);
        }
    });
    
    // Extrair fun√ß√£o espec√≠fica do hist√≥rico
    const historicoMatch = appContent.match(/function.*[Hh]istor.*\(.*\)[\s\S]*?\}/);
    if (historicoMatch) {
        console.log('\nüìã FUN√á√ÉO DE HIST√ìRICO ENCONTRADA:');
        console.log('---'.repeat(20));
        console.log(historicoMatch[0].substring(0, 500) + '...');
        console.log('---'.repeat(20));
    }
    
    // Procurar como dados s√£o buscados
    const fetchMatch = appContent.match(/fetch\(.*historico.*\)[\s\S]*?\.json\(\)/);
    if (fetchMatch) {
        console.log('\nüì° BUSCA DE DADOS:');
        console.log('---'.repeat(20));
        console.log(fetchMatch[0]);
        console.log('---'.repeat(20));
    }
    
    // Procurar como dados s√£o renderizados
    const renderMatch = appContent.match(/parcelas\.forEach[\s\S]*?\}\);/);
    if (renderMatch) {
        console.log('\nüé® RENDERIZA√á√ÉO DAS PARCELAS:');
        console.log('---'.repeat(20));
        console.log(renderMatch[0].substring(0, 300) + '...');
        console.log('---'.repeat(20));
    }
}

// ================================================================
// 3. EXPLICAR L√ìGICA ATUAL DO MODAL
// ================================================================

function explicarLogicaModal() {
    console.log('\n3Ô∏è‚É£ EXPLICA√á√ÉO DA L√ìGICA DO MODAL DE HIST√ìRICO...\n');
    
    console.log('üéØ COMO DEVERIA FUNCIONAR (L√ìGICA CORRETA):');
    console.log('');
    console.log('PASSO 1 - BUSCA DE DADOS:');
    console.log('   1. Modal abre para doa√ß√£o ID espec√≠fico');
    console.log('   2. Faz fetch para /api/doacoes/:id/historico');
    console.log('   3. Backend combina dados de 2 tabelas:');
    console.log('      - historico_pagamentos (primeira parcela - PAGA)');
    console.log('      - parcelas_futuras (parcelas 2+ - PENDENTES)');
    console.log('');
    console.log('PASSO 2 - PROCESSAMENTO:');
    console.log('   1. Primeira parcela: valor da doa√ß√£o, status PAGO');
    console.log('   2. Parcelas futuras: valor_parcelas_futuras, status PENDENTE');
    console.log('   3. Ordena por n√∫mero da parcela (1, 2, 3...)');
    console.log('');
    console.log('PASSO 3 - EXIBI√á√ÉO:');
    console.log('   1. Conta pagas vs pendentes');
    console.log('   2. Calcula valor total pago (apenas parcelas pagas)');
    console.log('   3. Renderiza lista com status correto');
    console.log('   4. Permite a√ß√µes (pagar parcela pendente)');
    console.log('');
    
    console.log('‚ùå PROBLEMAS POSS√çVEIS:');
    console.log('');
    console.log('PROBLEMA A - Backend:');
    console.log('   ‚Ä¢ Rota /api/doacoes/:id/historico n√£o existe');
    console.log('   ‚Ä¢ N√£o combina dados das duas tabelas');
    console.log('   ‚Ä¢ Retorna dados inconsistentes');
    console.log('');
    console.log('PROBLEMA B - Frontend:');
    console.log('   ‚Ä¢ N√£o diferencia primeira parcela de futuras');
    console.log('   ‚Ä¢ Status hardcoded como PAGO');
    console.log('   ‚Ä¢ Contadores incorretos');
    console.log('');
    console.log('PROBLEMA C - Dados:');
    console.log('   ‚Ä¢ Parcelas futuras n√£o s√£o criadas');
    console.log('   ‚Ä¢ Valores incorretos no banco');
    console.log('   ‚Ä¢ Refer√™ncias entre tabelas quebradas');
}

// ================================================================
// 4. GERAR PLANO DE A√á√ÉO
// ================================================================

function gerarPlanoAcao() {
    console.log('\n4Ô∏è‚É£ PLANO DE A√á√ÉO BASEADO NO DIAGN√ìSTICO...\n');
    
    console.log('üéØ SEQU√äNCIA DE VERIFICA√á√ÉO:');
    console.log('');
    console.log('ETAPA 1 - Se banco estiver limpo:');
    console.log('   ‚úÖ Criar uma doa√ß√£o teste simples (√∫nica)');
    console.log('   ‚úÖ Verificar se salva corretamente');
    console.log('   ‚úÖ Confirmar que modal funciona para doa√ß√£o √∫nica');
    console.log('');
    console.log('ETAPA 2 - Se doa√ß√£o √∫nica funcionar:');
    console.log('   ‚úÖ Criar doa√ß√£o recorrente teste');
    console.log('   ‚úÖ Verificar logs do servidor');
    console.log('   ‚úÖ Conferir se parcelas futuras s√£o criadas');
    console.log('');
    console.log('ETAPA 3 - Se parcelas forem criadas:');
    console.log('   ‚úÖ Testar modal de hist√≥rico');
    console.log('   ‚úÖ Verificar se dados s√£o buscados corretamente');
    console.log('   ‚úÖ Confirmar exibi√ß√£o de status');
    console.log('');
    console.log('ETAPA 4 - Corre√ß√µes espec√≠ficas:');
    console.log('   üîß Corrigir apenas o que n√£o funcionar');
    console.log('   üîß Uma corre√ß√£o por vez');
    console.log('   üîß Testar ap√≥s cada corre√ß√£o');
}

// ================================================================
// EXECU√á√ÉO COMPLETA
// ================================================================

async function executarVerificacao() {
    try {
        await verificarBanco();
        analisarModalHistorico();
        explicarLogicaModal();
        gerarPlanoAcao();
        
        console.log('\n' + '='.repeat(56));
        console.log('‚úÖ VERIFICA√á√ÉO COMPLETA REALIZADA!');
        console.log('='.repeat(56));
        console.log('\nüìã RESUMO:');
        console.log('‚Ä¢ Estado do banco foi verificado');
        console.log('‚Ä¢ L√≥gica do modal foi analisada');
        console.log('‚Ä¢ Plano de a√ß√£o foi definido');
        console.log('\nüéØ PR√ìXIMO PASSO:');
        console.log('Execute uma doa√ß√£o teste (√∫nica primeiro) e veja o resultado');
        
    } catch (error) {
        console.error('‚ùå Erro durante verifica√ß√£o:', error.message);
    }
}

// Executar verifica√ß√£o
executarVerificacao();